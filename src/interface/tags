!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
10	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            10 continue$/;"	l	subroutine:sphper	file:
10	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    10 CONTINUE$/;"	l	subroutine:INTER	file:
10	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^  10     continue$/;"	l	function:dnorm2	file:
10	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    10 end do$/;"	l	subroutine:DSYEVQ3	file:
10	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    10 end do$/;"	l	subroutine:DSYTRD3	file:
10	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   10 CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            100 continue$/;"	l	subroutine:polygen	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^        100 end do$/;"	l	subroutine:tessera	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    100 CONTINUE$/;"	l	subroutine:INTER	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    100 CONTINUE$/;"	l	subroutine:polyhedra	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    100 end do$/;"	l	subroutine:cavspl	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    100 end do$/;"	l	subroutine:gaubon	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    100 CONTINUE$/;"	l	subroutine:drcncn	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    100 CONTINUE$/;"	l	subroutine:drcnrd	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    100 CONTINUE$/;"	l	subroutine:drrdcn	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    100 CONTINUE$/;"	l	subroutine:drrdrd	file:
100	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^  100         CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
1000	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^        1000 FORMAT(\/,'WARNING: THE AEREA OF ONE TESSERA_ ON SPHERE ',I3, &$/;"	l	subroutine:gaubon	file:
1000	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1000 FORMAT('INTER_, distance consistency check: ',F14.12)$/;"	l	subroutine:INTER	file:
1000	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1000 FORMAT('NS=',I4,' NV=',I4,' NUMTS=', I4)$/;"	l	subroutine:tessera	file:
1000	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_print.f90	/^    1000 format (\/10x,8(4x,a6,i4))$/;"	l	subroutine:output	file:
1005	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1005 FORMAT('CHECKING INTER_SECTIONS WITH SPHERE N.',I4)$/;"	l	subroutine:tessera	file:
1005	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1005 FORMAT(\/'Final result from INTER_!')$/;"	l	subroutine:INTER	file:
1010	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1010 FORMAT('Coordinates: X=',F12.8,'  Y=',F12.8,'  Z=',F12.8, &$/;"	l	subroutine:tessera	file:
1010	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1010 FORMAT('P',I1,' X = ',F12.9,' Y = ',F12.9,' Z = ',F12.9)$/;"	l	subroutine:INTER	file:
1015	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1015 FORMAT('SPHERE',' X = ',F12.9,' Y = ',F12.9,' Z = ',F12.9, &$/;"	l	subroutine:INTER	file:
1015	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1015 FORMAT('VERT-OTHER CENTER DIST:',F10.8,' SPHERE RADIUS',F10.8)$/;"	l	subroutine:tessera	file:
1020	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1020 FORMAT('THIS TESSERA_ IS COMPLETELY COVERED BY SPHERE N.',I4)$/;"	l	subroutine:tessera	file:
1025	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1025 FORMAT('EDGE N.',I4,' STATUS: ',A18)$/;"	l	subroutine:tessera	file:
1030	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1030 FORMAT('EDGE N.',I2,' IS IN STATUS ',A16,' CASE N.',I2)$/;"	l	subroutine:tessera	file:
1035	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1035 FORMAT('VERTICES NUMBERS:',I3,' AND',I3)$/;"	l	subroutine:tessera	file:
1040	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1040 FORMAT('CALLING INTER_, CASE N.',I2,' INTERSECTING SPHERE:',I4)$/;"	l	subroutine:tessera	file:
1045	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1045 FORMAT('P',I1,' X = ',F12.9,' Y = ',F12.9,' Z = ',F12.9)$/;"	l	subroutine:tessera	file:
1050	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1050 FORMAT('AFTER INTER_')$/;"	l	subroutine:tessera	file:
1055	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    1055 FORMAT('DIST CHECK EDGE N.',I2,' DIFFERENCE:',F12.10)$/;"	l	subroutine:tessera	file:
11	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        11 end do$/;"	l	subroutine:DSYEVQ3	file:
11	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        11 end do$/;"	l	subroutine:DSYTRD3	file:
11	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   11   CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
110	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    110 NN = NE + 1$/;"	l	subroutine:polyhedra	file:
120	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    120 end do$/;"	l	subroutine:polyhedra	file:
130	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^        130 end do$/;"	l	subroutine:polyhedra	file:
150	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            150 r2gn = rij - rep + reg$/;"	l	subroutine:polyhedra	file:
150	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    150 end do$/;"	l	subroutine:tessera	file:
160	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            160 CONTINUE$/;"	l	subroutine:tessera	file:
160	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            160 fc1 = fc + 1.0$/;"	l	subroutine:polyhedra	file:
170	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            170 net = net + 1$/;"	l	subroutine:polyhedra	file:
180	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            180 xen = (xe(kg) + fc * xe(kp)) \/ fc1$/;"	l	subroutine:polyhedra	file:
20	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^            20 continue$/;"	l	subroutine:sphper	file:
20	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^            20 end do$/;"	l	subroutine:DSYEVQ3	file:
20	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        20 end do$/;"	l	subroutine:DSYEVH3	file:
20	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        20 end do$/;"	l	subroutine:DSYEVV3	file:
20	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        20 end do$/;"	l	subroutine:DSYTRD3	file:
20	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   20 CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
200	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    200 FORMAT(\/10X,'THE SOLUTE IS ENCLOSED IN ONE CAVITY')$/;"	l	subroutine:cavspl	file:
200	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    200 end do$/;"	l	subroutine:gaubon	file:
200	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    200 CONTINUE$/;"	l	subroutine:drcncn	file:
200	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    200 CONTINUE$/;"	l	subroutine:drcnrd	file:
200	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    200 CONTINUE$/;"	l	subroutine:drrdcn	file:
200	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    200 CONTINUE$/;"	l	subroutine:drrdrd	file:
2310	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    2310 end do$/;"	l	subroutine:polygen	file:
30	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^            30 IF (M == L) THEN$/;"	l	subroutine:DSYEVQ3	file:
30	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        30 end do$/;"	l	subroutine:DSYTRD3	file:
30	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   30 CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
300	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^        300 end do$/;"	l	subroutine:tessera	file:
300	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    300 FORMAT(\/10X,'THE SOLUTE IS ENCLOSED IN TWO DISTINCT CAVITIES'\/ &$/;"	l	subroutine:cavspl	file:
310	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^        310 end do$/;"	l	subroutine:polyhedra	file:
40	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^            40 end do$/;"	l	subroutine:DSYEVQ3	file:
40	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^            40 end do$/;"	l	subroutine:DSYEVV3	file:
40	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        40 end do$/;"	l	subroutine:DSYEVH3	file:
40	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        40 end do$/;"	l	subroutine:DSYTRD3	file:
40	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   40 CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
400	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    400 FORMAT(\/10X,'THE FIRST CAVITY IS FORMED BY SPHERE(S) :'\/)$/;"	l	subroutine:cavspl	file:
41	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^            41 end do$/;"	l	subroutine:DSYTRD3	file:
50	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    50 DO I=1,MXCENT$/;"	l	subroutine:cavspl	file:
50	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^                50 end do$/;"	l	subroutine:DSYEVQ3	file:
50	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        50 end do$/;"	l	subroutine:DSYEVV3	file:
50	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        50 end do$/;"	l	subroutine:DSYTRD3	file:
50	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   50   CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
500	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    500 FORMAT(\/10X,'THE SECOND CAVITY IS FORMED BY SPHERE(S) :'\/)$/;"	l	subroutine:cavspl	file:
500	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    500 end do$/;"	l	subroutine:cavder	file:
51	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   51     CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
510	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^        510 NSUB = 1$/;"	l	subroutine:cavder	file:
55	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^                    55 end do$/;"	l	subroutine:DSYEVV3	file:
60	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^        60 IF (I == 4) THEN$/;"	l	subroutine:DSYEVV3	file:
60	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   60   CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
600	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^        600 end do$/;"	l	subroutine:cavder	file:
61	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   61     CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
70	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^            70 end do$/;"	l	subroutine:DSYEVV3	file:
70	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   70         CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
700	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^            700 end do$/;"	l	subroutine:cavder	file:
80	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    80 Q(1, 3) = Q(2, 1) * Q(3, 2) - Q(3, 1) * Q(2, 2)$/;"	l	subroutine:DSYEVV3	file:
80	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   80         CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
800	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^                800 end do$/;"	l	subroutine:cavder	file:
90	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^   90         CONTINUE$/;"	l	subroutine:DSYEVJ3	file:
AD_directional	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^typedef taylor<double, 1, 1> AD_directional;$/;"	t	namespace:pcm
AD_gradient	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^typedef taylor<double, 3, 1> AD_gradient;$/;"	t	namespace:pcm
AD_hessian	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^typedef taylor<double, 3, 2> AD_hessian;$/;"	t	namespace:pcm
ANY_TO_CONST_KEY_PTR	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	17;"	d	file:
ASSERT_FILE	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	145;"	d
AS_CTYPE	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	61;"	d	file:
AS_TYPE	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	57;"	d	file:
Anisotropic	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Anisotropic()$/;"	f	class:pcm::dielectric_profile::__final
Anisotropic	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Anisotropic(const Eigen::Vector3d & eigen_eps, const Eigen::Vector3d & euler_ang)$/;"	f	class:pcm::dielectric_profile::__final
AnisotropicLiquid	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^AnisotropicLiquid<DerivativeTraits>::AnisotropicLiquid($/;"	f	class:pcm::green::AnisotropicLiquid
Atom	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  Atom()$/;"	f	struct:pcm::utils::Atom
Atom	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  Atom(const std::string & elem,$/;"	f	struct:pcm::utils::Atom
Atom	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^struct Atom {$/;"	s	namespace:pcm::utils
BIOperatorData	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BIOperatorData.hpp	/^  BIOperatorData(const std::string & type, double s)$/;"	f	struct:pcm::BIOperatorData
BIOperatorData	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BIOperatorData.hpp	/^struct BIOperatorData {$/;"	s	namespace:pcm
BOHR_TO_ANGSTROM	/mnt/HD/software/pcmsolver-1.2.1/include/PhysicalConstants.hpp	/^  double BOHR_TO_ANGSTROM;$/;"	m	struct:LengthConversion
BaseFactory	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^template <typename CreateObject> class BaseFactory {$/;"	c	namespace:pcm::detail
BigEndianTest	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^char cnpy::BigEndianTest() {$/;"	f	class:cnpy
Bool	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Bool,$/;"	e	enum:KeyType::KeyKinds
BoolArray	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  BoolArray,$/;"	e	enum:KeyType::KeyKinds
CODATAyear	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  int CODATAyear() const { return CODATAyear_; }$/;"	f	class:pcm::Input
CODATAyear_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  int CODATAyear_;$/;"	m	class:pcm::Input
CPCMSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  CPCMSolver() {}$/;"	f	class:pcm::solver::CPCMSolver
CPCMSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  CPCMSolver(bool symm, double corr)$/;"	f	class:pcm::solver::CPCMSolver
CPCMSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^class CPCMSolver : public ISolver {$/;"	c	namespace:pcm::solver
CTORBody	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void Meddle::CTORBody() {$/;"	f	class:pcm::Meddle
CallbackConstIter	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  typedef typename CallbackMap::const_iterator CallbackConstIter;$/;"	t	class:pcm::detail::BaseFactory
CallbackMap	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  typedef std::map<std::string, CreateObject> CallbackMap;$/;"	t	class:pcm::detail::BaseFactory
CallbackPair	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  typedef typename CallbackMap::value_type CallbackPair;$/;"	t	class:pcm::detail::BaseFactory
CavityData	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  CavityData(const std::string & type,$/;"	f	struct:pcm::CavityData
CavityData	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^struct CavityData {$/;"	s	namespace:pcm
ChargeDistribution	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^struct ChargeDistribution {$/;"	s	namespace:pcm::utils
Collocation	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^Collocation::Collocation() : factor_(1.07) {}$/;"	f	class:pcm::bi_operators::Collocation
Collocation	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^Collocation::Collocation(double fac) : factor_(fac) {}$/;"	f	class:pcm::bi_operators::Collocation
Coulomb	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::Coulomb($/;"	f	class:pcm::green::SphericalDiffuse
CoulombDerivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::CoulombDerivative($/;"	f	class:pcm::green::SphericalDiffuse
CreateBIOperator	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BoundaryIntegralOperator.hpp	/^    CreateBIOperator;$/;"	t	namespace:pcm::bi_operators::detail
CreateCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Cavity.hpp	/^typedef pcm::function<ICavity *(const CavityData &)> CreateCavity;$/;"	t	namespace:pcm::cavity::detail
CreateGreensFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/Green.hpp	/^typedef pcm::function<IGreensFunction *(const GreenData &)> CreateGreensFunction;$/;"	t	namespace:pcm::green::detail
CreateRadiiSet	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^typedef pcm::function<RadiiSet()> CreateRadiiSet;$/;"	t	namespace:pcm::utils::detail
CreateSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/Solver.hpp	/^typedef pcm::function<ISolver *(const SolverData &)> CreateSolver;$/;"	t	namespace:pcm::solver::detail
CubicSpline	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  typedef Eigen::Spline<double, 1> CubicSpline;$/;"	t	class:__final
DEBUG_LEVEL	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	75;"	d
DSYEVC3	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    SUBROUTINE DSYEVC3(/;"	s	module:pedra_dlapack
DSYEVH3	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    SUBROUTINE DSYEVH3(/;"	s	module:pedra_dlapack
DSYEVJ3	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^      SUBROUTINE DSYEVJ3(/;"	s	module:pedra_dlapack
DSYEVQ3	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    SUBROUTINE DSYEVQ3(/;"	s	module:pedra_dlapack
DSYEVV3	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    SUBROUTINE DSYEVV3(/;"	s	module:pedra_dlapack
DSYTRD3	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    SUBROUTINE DSYTRD3(/;"	s	module:pedra_dlapack
Data	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Data$/;"	e	enum:KeyType::KeyKinds
Dbl	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Dbl,$/;"	e	enum:KeyType::KeyKinds
DblArray	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  DblArray,$/;"	e	enum:KeyType::KeyKinds
DebugLevel	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.cpp	/^int GetkwMessageStream::msg::DebugLevel = 0;$/;"	m	class:GetkwMessageStream::msg	file:
DebugLevel	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	/^  static int DebugLevel;$/;"	m	struct:GetkwMessageStream::msg
DerivativeProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^    DerivativeProbe;$/;"	t	namespace:pcm
DifferentiableFunction	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Stencils.hpp	/^    DifferentiableFunction;$/;"	t
Element	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Element(int nv,$/;"	f	class:pcm::cavity::__final
FileLogPolicy	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^  FileLogPolicy() : outStream_(new std::ofstream) {}$/;"	f	class:logging::FileLogPolicy
FileLogPolicy	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^class FileLogPolicy : public ILogPolicy {$/;"	c	namespace:logging
GETKWERROR_H_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	12;"	d
GETKW_H_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	11;"	d
GFDerivative	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^    GFDerivative;$/;"	t	namespace:pcm::utils
GFValue	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^    GFValue;$/;"	t	namespace:pcm::utils
GaussLegendre16	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^QuadratureRule GaussLegendre16() {$/;"	f	namespace:pcm::utils::detail
GaussLegendre32	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^QuadratureRule GaussLegendre32() {$/;"	f	namespace:pcm::utils::detail
GaussLegendre64	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^QuadratureRule GaussLegendre64() {$/;"	f	namespace:pcm::utils::detail
GaussLegendreRule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  GaussLegendreRule()$/;"	f	class:pcm::utils::GaussLegendreRule
GaussLegendreRule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^template <int nNodes> class GaussLegendreRule {$/;"	c	namespace:pcm::utils
GePolCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^GePolCavity::GePolCavity(const Molecule & molec,$/;"	f	class:pcm::cavity::GePolCavity
GePolCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^GePolCavity::GePolCavity(const Sphere & sph,$/;"	f	class:pcm::cavity::GePolCavity
GePolCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^GePolCavity::GePolCavity(const std::vector<Sphere> & sph,$/;"	f	class:pcm::cavity::GePolCavity
GePolCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^  GePolCavity() {}$/;"	f	class:pcm::cavity::__final
Getkw	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^Getkw::Getkw() {$/;"	f	class:Getkw
Getkw	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^Getkw::Getkw(const Getkw & kw) {$/;"	f	class:Getkw
Getkw	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^Getkw::Getkw(const string file, bool _verbose, bool _strict)$/;"	f	class:Getkw
Getkw	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^class Getkw {$/;"	c
GetkwError	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^GetkwError::GetkwError() {}$/;"	f	class:GetkwError
GetkwError	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^GetkwError::GetkwError(const string & err) : msg(err) {$/;"	f	class:GetkwError
GetkwError	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^GetkwError::GetkwError(ostringstream & err) {$/;"	f	class:GetkwError
GetkwError	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	/^class GetkwError : public exception {$/;"	c
GetkwMessageStream	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	/^namespace GetkwMessageStream {$/;"	n
GreenData	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  GreenData(const std::string & type,$/;"	f	struct:pcm::GreenData
GreenData	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^struct GreenData {$/;"	s	namespace:pcm
GreensFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  GreensFunction(const ProfilePolicy & p) : delta_(1.0e-04), profile_(p) {}$/;"	f	class:pcm::green::GreensFunction
GreensFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^class GreensFunction : public IGreensFunction {$/;"	c	namespace:pcm::green
GreensFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^class GreensFunction<Stencil, ProfilePolicy> : public IGreensFunction {$/;"	c	namespace:pcm::green
IBoundaryIntegralOperator	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.hpp	/^class IBoundaryIntegralOperator {$/;"	c	namespace:pcm
ICavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^ICavity::ICavity() : nElements_(0), built(false) {}$/;"	f	class:pcm::ICavity
ICavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^ICavity::ICavity(const Molecule & molec)$/;"	f	class:pcm::ICavity
ICavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^ICavity::ICavity(const Sphere & sph) : built(false) {$/;"	f	class:pcm::ICavity
ICavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^ICavity::ICavity(const std::vector<Sphere> & sph) : spheres_(sph), built(false) {$/;"	f	class:pcm::ICavity
ICavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^class ICavity {$/;"	c	namespace:pcm
IEFSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  IEFSolver() {}$/;"	f	class:pcm::solver::IEFSolver
IEFSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  IEFSolver(bool symm) : ISolver(), hermitivitize_(symm) {}$/;"	f	class:pcm::solver::IEFSolver
IEFSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^class IEFSolver : public ISolver {$/;"	c	namespace:pcm::solver
IF_ANY_KEYTYPE_IS	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	15;"	d	file:
IGreensFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^class IGreensFunction {$/;"	c	namespace:pcm
ILogPolicy	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^class ILogPolicy {$/;"	c	namespace:logging
INSERT_ELEMENTS	/mnt/HD/software/pcmsolver-1.2.1/include/STLUtils.hpp	/^template <typename T> inline void INSERT_ELEMENTS(T & coll, int first, int last) {$/;"	f
INTER	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    SUBROUTINE INTER(/;"	s	module:pedra_cavity
INTERNAL_INCONSISTENCY	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	127;"	d
INVALID_ARG_ABORT	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	115;"	d
ISolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  ISolver() : built_(false), isotropic_(true) {}$/;"	f	class:pcm::ISolver
ISolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^class ISolver {$/;"	c	namespace:pcm
Input	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^Input::Input(const PCMInput & host_input) {$/;"	f	class:pcm::Input
Input	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^Input::Input(const std::string & filename) {$/;"	f	class:pcm::Input
Input	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  Input() {}$/;"	f	class:pcm::Input
Input	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^class PCMSolver_EXPORT Input {$/;"	c	namespace:pcm
Int	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Int,$/;"	e	enum:KeyType::KeyKinds
IntArray	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  IntArray,$/;"	e	enum:KeyType::KeyKinds
IntegratorParameters	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  IntegratorParameters(double r0, double rinf, double step)$/;"	f	struct:pcm::green::detail::IntegratorParameters
IntegratorParameters	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^struct IntegratorParameters {$/;"	s	namespace:pcm::green::detail
IonicLiquid	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^IonicLiquid<DerivativeTraits>::IonicLiquid(double eps, double k)$/;"	f	class:pcm::green::IonicLiquid
KEYWORD_H_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	11;"	d
K_0_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  ISolver * K_0_;$/;"	m	class:pcm::__final
K_d_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  ISolver * K_d_;$/;"	m	class:pcm::__final
KernelD	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^    KernelD;$/;"	t	namespace:pcm::bi_operators
KernelD	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^    KernelD;$/;"	t	namespace:pcm
KernelS	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^    KernelS;$/;"	t	namespace:pcm::bi_operators
KernelS	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^typedef function<double(const Eigen::Vector3d &, const Eigen::Vector3d &)> KernelS;$/;"	t	namespace:pcm
KeyKinds	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^enum KeyKinds {$/;"	g	namespace:KeyType
KeyType	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^namespace KeyType {$/;"	n
Keyword	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Keyword(const std::string _name, const T & _val, bool _isDefd = false)$/;"	f	class:Keyword
Keyword	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^template <class T> class Keyword {$/;"	c
LOG	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	34;"	d
LOG	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	42;"	d
LOG_ALL	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	36;"	d
LOG_ALL	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	44;"	d
LOG_FINE	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	35;"	d
LOG_FINE	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	43;"	d
LOG_TIME	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	37;"	d
LOG_TIME	/mnt/HD/software/pcmsolver-1.2.1/include/LoggerInterface.hpp	45;"	d
L_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  int L_;$/;"	m	class:pcm::green::__final
Legendre	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Legendre.hpp	/^namespace Legendre {$/;"	n
LengthConversion	/mnt/HD/software/pcmsolver-1.2.1/include/PhysicalConstants.hpp	/^struct LengthConversion {$/;"	s
LnTransformedRadial	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  LnTransformedRadial(const ProfileEvaluator & e, int lval) : eval_(e), l_(lval) {}$/;"	f	class:pcm::green::detail::LnTransformedRadial
LnTransformedRadial	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^class LnTransformedRadial {$/;"	c	namespace:pcm::green::detail
MEPfromMolecule	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool MEPfromMolecule() { return MEPfromMolecule_; }$/;"	f	class:pcm::Input
MEPfromMolecule_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool MEPfromMolecule_;$/;"	m	class:pcm::Input
MESSAGES_H	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	11;"	d
MSG_DEBUG	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	77;"	d
MSG_ERROR	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	98;"	d
MSG_FATAL	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	103;"	d
MSG_INFO	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	83;"	d
MSG_INVALID_ARG	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	110;"	d
MSG_NOTE	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	88;"	d
MSG_WARN	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	93;"	d
Meddle	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^Meddle::Meddle(const Input & input, const HostWriter & write)$/;"	f	class:pcm::Meddle
Meddle	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^Meddle::Meddle(const std::string & inputFileName, const HostWriter & write)$/;"	f	class:pcm::Meddle
Meddle	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^Meddle::Meddle(int nr_nuclei,$/;"	f	class:pcm::Meddle
MembraneTanh	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  MembraneTanh() {}$/;"	f	class:pcm::dielectric_profile::MembraneTanh
MembraneTanh	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  MembraneTanh(double e1,$/;"	f	class:pcm::dielectric_profile::MembraneTanh
MembraneTanh	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^class MembraneTanh {$/;"	c	namespace:pcm::dielectric_profile
Metal	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^  Metal() : epsilon(std::complex<double>(1.0, 1.0)) {}$/;"	f	struct:pcm::dielectric_profile::__final
Metal	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^  Metal(const std::complex<double> & e) : epsilon(e) {}$/;"	f	struct:pcm::dielectric_profile::__final
Metal	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^  Metal(double eRe, double eIm) : epsilon(std::complex<double>(eRe, eIm)) {}$/;"	f	struct:pcm::dielectric_profile::__final
Molecule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Molecule::Molecule(const Molecule & other) { *this = other; }$/;"	f	class:pcm::Molecule
Molecule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Molecule::Molecule(const std::vector<Sphere> & sph)$/;"	f	class:pcm::Molecule
Molecule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Molecule::Molecule(int nat,$/;"	f	class:pcm::Molecule
Molecule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Molecule() {$/;"	f	class:pcm::Molecule
Molecule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^class Molecule {$/;"	c	namespace:pcm
NEEDS_FIX	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	172;"	d
NEEDS_TESTING	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	135;"	d
NOTE	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	161;"	d
NOT_IMPLEMENTED_ABORT	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	154;"	d
NOT_REACHED_ABORT	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	121;"	d
NpyArray	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^struct NpyArray {$/;"	s	namespace:cnpy
Omega	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  Omega() : L_(0), y_0_(0.0), y_infinity_(0.0) {}$/;"	f	class:pcm::green::__final
Omega	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  Omega(int l,$/;"	f	class:pcm::green::__final
OneLayerErf	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  OneLayerErf() {}$/;"	f	class:pcm::dielectric_profile::OneLayerErf
OneLayerErf	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  OneLayerErf(double e1, double e2, double w, double c)$/;"	f	class:pcm::dielectric_profile::OneLayerErf
OneLayerErf	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^class OneLayerErf {$/;"	c	namespace:pcm::dielectric_profile
OneLayerLog	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  OneLayerLog() {}$/;"	f	class:pcm::dielectric_profile::OneLayerLog
OneLayerLog	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  OneLayerLog(double e1, double e2, double w, double c)$/;"	f	class:pcm::dielectric_profile::OneLayerLog
OneLayerLog	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^class OneLayerLog {$/;"	c	namespace:pcm::dielectric_profile
OneLayerTanh	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  OneLayerTanh() {}$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
OneLayerTanh	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  OneLayerTanh(double e1, double e2, double w, double c)$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
OneLayerTanh	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^class OneLayerTanh {$/;"	c	namespace:pcm::dielectric_profile
P0	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Legendre.hpp	/^template <typename T> inline T P0(const T & \/* x *\/) { return static_cast<T>(1.0); }$/;"	f	namespace:Legendre
P1	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Legendre.hpp	/^template <typename T> inline T P1(const T & x) { return x; }$/;"	f	namespace:Legendre
P2	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Legendre.hpp	/^template <typename T> inline T P2(const T & x) {$/;"	f	namespace:Legendre
PCMSOLVER_ASSERT	/mnt/HD/software/pcmsolver-1.2.1/include/ErrorHandling.hpp	85;"	d
PCMSOLVER_ERROR	/mnt/HD/software/pcmsolver-1.2.1/include/ErrorHandling.hpp	73;"	d
PCMSOLVER_STATIC_ASSERT	/mnt/HD/software/pcmsolver-1.2.1/include/ErrorHandling.hpp	89;"	d
PCMSOLVER_STATIC_ASSERT	/mnt/HD/software/pcmsolver-1.2.1/include/ErrorHandling.hpp	92;"	d
PRINT	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	59;"	d
PRINT_ELEMENTS	/mnt/HD/software/pcmsolver-1.2.1/include/STLUtils.hpp	/^inline void PRINT_ELEMENTS(const T & coll, const std::string & optcstr = "") {$/;"	f
PRINT_FUNC_NAME	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	19;"	d	file:
PRINT_MAPPED_ELEMENTS	/mnt/HD/software/pcmsolver-1.2.1/include/STLUtils.hpp	/^inline void PRINT_MAPPED_ELEMENTS(const T & coll, const std::string & optcstr = "") {$/;"	f
Pn	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Legendre.hpp	/^template <typename T> inline T Pn(unsigned int n, const T & x) {$/;"	f	namespace:Legendre
Printer	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^    Printer(const HostWriter & hw) : writer_(hw) {}$/;"	f	struct:pcm::__final::Printer
Printer	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  struct Printer {$/;"	s	class:pcm::__final
ProfileEvaluator	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^typedef pcm::function<pcm::tuple<double, double>(const double)> ProfileEvaluator;$/;"	t	namespace:pcm::green::detail
Purisima	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^Purisima::Purisima() : factor_(1.07) {}$/;"	f	class:pcm::bi_operators::Purisima
Purisima	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^Purisima::Purisima(double fac) : factor_(fac) {}$/;"	f	class:pcm::bi_operators::Purisima
QuadratureRule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^typedef pcm::tuple<std::vector<double>, std::vector<double> > QuadratureRule;$/;"	t	namespace:pcm::utils::detail
R_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Eigen::Matrix3d R_;$/;"	m	class:pcm::dielectric_profile::__final
RadialFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  RadialFunction() : solution_(IndependentSolution<StateVariable, ODESystem>()) {}$/;"	f	class:pcm::green::__final
RadialFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  RadialFunction(int l,$/;"	f	class:pcm::green::__final
RadialSolution	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  typedef pcm::array<StateVariable, 3> RadialSolution;$/;"	t	class:pcm::green::__final
RadiiSet	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^typedef pcm::tuple<std::string, std::vector<Atom> > RadiiSet;$/;"	t	namespace:pcm::utils
RestartCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.hpp	/^  RestartCavity(const std::string & _fname) : file(_fname) { makeCavity(); }$/;"	f	class:pcm::cavity::__final
Rinfinity_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  Eigen::MatrixXd Rinfinity_;$/;"	m	class:pcm::solver::IEFSolver
SECTION_H_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	11;"	d
SET_DEBUG_LEVEL	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	73;"	d
SET_MESSAGE_STREAM	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	74;"	d
SPRINT	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	60;"	d
STR_DEBUG	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	190;"	d
STR_DEBUG	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	29;"	d
STR_ERROR	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	211;"	d
STR_ERROR	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	50;"	d
STR_INFO	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	197;"	d
STR_INFO	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	36;"	d
STR_WARN	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	204;"	d
STR_WARN	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	43;"	d
S_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  Eigen::MatrixXd S_;$/;"	m	class:pcm::solver::CPCMSolver
ScalarODERHS	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.hpp	/^typedef std::function<double(double, double)> ScalarODERHS;$/;"	t	namespace:pcm::utils
Section	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^Section::Section(const Section & s) {$/;"	f	class:Section
Section	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^Section::Section(const string & _name, const string & _tag) : name(_name) {$/;"	f	class:Section
Section	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^class Section {$/;"	c
Sharp	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^  Sharp() : epsilon(1.0), epsilonSolvent(1.0), radius(1.0) {}$/;"	f	struct:pcm::dielectric_profile::__final
Sharp	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^  Sharp(double eL, double eR, double c)$/;"	f	struct:pcm::dielectric_profile::__final
Solvent	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^  Solvent() {}$/;"	f	struct:pcm::utils::Solvent
Solvent	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^  Solvent(const std::string & n, double es, double ed, double r)$/;"	f	struct:pcm::utils::Solvent
Solvent	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^struct Solvent {$/;"	s	namespace:pcm::utils
SolventMap	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^typedef std::map<std::string, utils::Solvent> SolventMap;$/;"	t	namespace:pcm
SolverData	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverData.hpp	/^  SolverData(const std::string & type, double corr, bool symm = true)$/;"	f	struct:pcm::SolverData
SolverData	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverData.hpp	/^struct SolverData {$/;"	s	namespace:pcm
Sphere	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  Sphere() {}$/;"	f	struct:pcm::utils::Sphere
Sphere	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  Sphere(const Eigen::Vector3d & c, double r) : center(c), radius(r) {}$/;"	f	struct:pcm::utils::Sphere
Sphere	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^struct Sphere {$/;"	s	namespace:pcm::utils
SphericalDiffuse	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  SphericalDiffuse(double e1,$/;"	f	class:pcm::green::__final
SphericalSharp	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^SphericalSharp<DerivativeTraits>::SphericalSharp(double e,$/;"	f	class:pcm::green::SphericalSharp
SplineFunction	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  SplineFunction(const Eigen::VectorXd & x, const Eigen::VectorXd & y)$/;"	f	class:__final
StateType	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^typedef std::vector<double> StateType;$/;"	t	namespace:pcm::green::detail
Stencil	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^typedef double Stencil;$/;"	t	namespace:pcm
Str	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Str,$/;"	e	enum:KeyType::KeyKinds
StrArray	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  StrArray,$/;"	e	enum:KeyType::KeyKinds
SurfaceFunctionMap	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  typedef std::map<std::string, Eigen::VectorXd> SurfaceFunctionMap;$/;"	t	class:pcm::__final
SurfaceFunctionMapConstIter	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  typedef SurfaceFunctionMap::const_iterator SurfaceFunctionMapConstIter;$/;"	t	class:pcm::__final
SurfaceFunctionMapIter	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  typedef SurfaceFunctionMap::iterator SurfaceFunctionMapIter;$/;"	t	class:pcm::__final
SurfaceFunctionPair	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  typedef SurfaceFunctionMap::value_type SurfaceFunctionPair;$/;"	t	class:pcm::__final
Symmetry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  Symmetry() : nrGenerators_(0) {$/;"	f	class:Symmetry
Symmetry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  Symmetry(const Symmetry & other)$/;"	f	class:Symmetry
Symmetry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  Symmetry(int nr_gen, int gen[3]) : nrGenerators_(nr_gen) {$/;"	f	class:Symmetry
Symmetry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^class Symmetry {$/;"	c
TEST_ARRAY	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	12;"	d	file:
THROW_GETKW	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	22;"	d
TIMER_DONE	/mnt/HD/software/pcmsolver-1.2.1/include/TimerInterface.hpp	40;"	d
TIMER_DONE	/mnt/HD/software/pcmsolver-1.2.1/include/TimerInterface.hpp	46;"	d
TIMER_OFF	/mnt/HD/software/pcmsolver-1.2.1/include/TimerInterface.hpp	39;"	d
TIMER_OFF	/mnt/HD/software/pcmsolver-1.2.1/include/TimerInterface.hpp	45;"	d
TIMER_ON	/mnt/HD/software/pcmsolver-1.2.1/include/TimerInterface.hpp	38;"	d
TIMER_ON	/mnt/HD/software/pcmsolver-1.2.1/include/TimerInterface.hpp	44;"	d
Tepsilon_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  Eigen::MatrixXd Tepsilon_;$/;"	m	class:pcm::solver::IEFSolver
TheTimer	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^  static Timer & TheTimer() {$/;"	f	class:timer::Timer
Timer	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^class Timer {$/;"	c	namespace:timer
TimingsMap	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^typedef std::map<std::string, timing> TimingsMap;$/;"	t	namespace:timer
TimingsPair	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^typedef std::pair<std::string, timing> TimingsPair;$/;"	t	namespace:timer
Undefined	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Undefined,$/;"	e	enum:KeyType::KeyKinds
Uniform	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^  Uniform() : epsilon(1.0) {}$/;"	f	struct:pcm::dielectric_profile::__final
Uniform	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^  Uniform(double e) : epsilon(e) {}$/;"	f	struct:pcm::dielectric_profile::__final
UniformDielectric	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^UniformDielectric<DerivativeTraits>::UniformDielectric(double eps)$/;"	f	class:pcm::green::UniformDielectric
Unknown	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  Unknown = -1,$/;"	e	enum:KeyType::KeyKinds
Vacuum	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^Vacuum<DerivativeTraits>::Vacuum()$/;"	f	class:pcm::green::Vacuum
VectorODERHS	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.hpp	/^typedef std::function<double *(double, int, double)> VectorODERHS;$/;"	t	namespace:pcm::utils
WRONG	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	183;"	d
Yukawa	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^  Yukawa() : epsilon(1.0), kappa(0.0) {}$/;"	f	struct:pcm::dielectric_profile::__final
Yukawa	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^  Yukawa(double eps, double k) : epsilon(eps), kappa(k) {}$/;"	f	struct:pcm::dielectric_profile::__final
Zeta	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  Zeta() : L_(0), y_0_(0.0), y_infinity_(0.0) {}$/;"	f	class:pcm::green::__final
Zeta	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  Zeta(int l,$/;"	f	class:pcm::green::__final
__final	/mnt/HD/software/pcmsolver-1.2.1/include/Cxx11Workarounds.hpp	142;"	d
__final	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.hpp	/^class Collocation __final : public IBoundaryIntegralOperator {$/;"	c	namespace:pcm::bi_operators
__final	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^class Numerical __final : public IBoundaryIntegralOperator {$/;"	c	namespace:pcm::bi_operators
__final	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.hpp	/^class Purisima __final : public IBoundaryIntegralOperator {$/;"	c	namespace:pcm::bi_operators
__final	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^class Element __final {$/;"	c	namespace:pcm::cavity
__final	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^class GePolCavity __final : public ICavity {$/;"	c	namespace:pcm::cavity
__final	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.hpp	/^class RestartCavity __final : public ICavity {$/;"	c	namespace:pcm::cavity
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^class AnisotropicLiquid __final$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^class RadialFunction __final {$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^template <typename StateVariable, typename ODESystem> class Omega __final {$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^template <typename StateVariable, typename ODESystem> class Zeta __final {$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^class IonicLiquid __final$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^class SphericalDiffuse __final : public GreensFunction<Stencil, ProfilePolicy> {$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^class SphericalSharp __final$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^class UniformDielectric __final$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^class Vacuum __final$/;"	c	namespace:pcm::green
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^class Anisotropic __final {$/;"	c	namespace:pcm::dielectric_profile
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^struct Metal __final {$/;"	s	namespace:pcm::dielectric_profile
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^struct Sharp __final {$/;"	s	namespace:pcm::dielectric_profile
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^struct Uniform __final {$/;"	s	namespace:pcm::dielectric_profile
__final	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^struct Yukawa __final {$/;"	s	namespace:pcm::dielectric_profile
__final	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^class PCMSolver_API Meddle __final {$/;"	c	namespace:pcm
__final	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^class Factory __final : public detail::BaseFactory<CreateObject> {$/;"	c	namespace:pcm
__final	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^class SplineFunction __final {$/;"	c
__noexcept	/mnt/HD/software/pcmsolver-1.2.1/include/Cxx11Workarounds.hpp	156;"	d
__noreturn	/mnt/HD/software/pcmsolver-1.2.1/include/Cxx11Workarounds.hpp	170;"	d
__nullptr	/mnt/HD/software/pcmsolver-1.2.1/include/Cxx11Workarounds.hpp	163;"	d
__override	/mnt/HD/software/pcmsolver-1.2.1/include/Cxx11Workarounds.hpp	149;"	d
__override	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.hpp	/^                                        const IGreensFunction & gf) const __override;$/;"	m	class:pcm::bi_operators::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^                                        const IGreensFunction & gf) const __override;$/;"	m	class:pcm::bi_operators::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.hpp	/^                                        const IGreensFunction & gf) const __override;$/;"	m	class:pcm::bi_operators::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^  virtual std::ostream & printCavity(std::ostream & os) __override;$/;"	m	class:pcm::cavity::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.hpp	/^  virtual std::ostream & printCavity(std::ostream & os) __override;$/;"	m	class:pcm::cavity::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^                                             double \/* factor *\/) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^                                      DerivativeTraits * pp) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^                              const Eigen::Vector3d & p2) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^  virtual DerivativeProbe exportDerivativeProbe_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^  virtual KernelD exportKernelD_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^  virtual KernelS exportKernelS_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^  virtual std::ostream & printObject(std::ostream & os) __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^                                             double \/* factor *\/) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^                                      DerivativeTraits * pp) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^                              const Eigen::Vector3d & p2) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^  virtual DerivativeProbe exportDerivativeProbe_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^  virtual KernelD exportKernelD_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^  virtual KernelS exportKernelS_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^  virtual std::ostream & printObject(std::ostream & os) __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^                              const Eigen::Vector3d & p2) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual DerivativeProbe exportDerivativeProbe_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual KernelD exportKernelD_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual KernelS exportKernelS_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual Stencil operator()(Stencil * sp, Stencil * pp) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual double doubleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual double singleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  virtual std::ostream & printObject(std::ostream & os) __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^                                      DerivativeTraits * pp) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^                              const Eigen::Vector3d & p2) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  virtual DerivativeProbe exportDerivativeProbe_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  virtual KernelD exportKernelD_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  virtual KernelS exportKernelS_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  virtual double doubleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  virtual double singleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  virtual std::ostream & printObject(std::ostream & os) __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^                                      DerivativeTraits * pp) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^                              const Eigen::Vector3d & p2) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^  virtual DerivativeProbe exportDerivativeProbe_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^  virtual KernelD exportKernelD_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^  virtual KernelS exportKernelS_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^  virtual double doubleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^  virtual double singleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^  virtual std::ostream & printObject(std::ostream & os) __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^                                      DerivativeTraits * pp) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^                              const Eigen::Vector3d & p2) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^  virtual DerivativeProbe exportDerivativeProbe_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^  virtual KernelD exportKernelD_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^  virtual KernelS exportKernelS_impl() const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^  virtual double doubleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^  virtual double singleLayer_impl(const Element & e, double factor) const __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^  virtual std::ostream & printObject(std::ostream & os) __override;$/;"	m	class:pcm::green::__final
__override	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^                                             int irrep = 0) const __override;$/;"	m	class:pcm::solver::CPCMSolver
__override	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^      __override;$/;"	m	class:pcm::solver::CPCMSolver
__override	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  virtual std::ostream & printSolver(std::ostream & os) __override;$/;"	m	class:pcm::solver::CPCMSolver
__override	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^                                             int irrep = 0) const __override;$/;"	m	class:pcm::solver::IEFSolver
__override	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^      __override;$/;"	m	class:pcm::solver::IEFSolver
__override	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  virtual std::ostream & printSolver(std::ostream & os) __override;$/;"	m	class:pcm::solver::IEFSolver
abscissa	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  double abscissa(int i) const { return abscissa_[i]; }$/;"	f	class:pcm::utils::GaussLegendreRule
abscissa_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  std::vector<double> abscissa_;$/;"	m	class:pcm::utils::GaussLegendreRule
addKey	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^template <class T> void Section::addKey(const Keyword<T> & key) {$/;"	f	class:Section
addKey	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^template <class T> void Section::addKey(const Keyword<T> * key) {$/;"	f	class:Section
addSect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^void Section::addSect(Section & sect) {$/;"	f	class:Section
addSect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^void Section::addSect(Section * sect) {$/;"	f	class:Section
addedSpheres	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^  int addedSpheres;$/;"	m	class:pcm::cavity::__final
angstrom2ToBohr2	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^double angstrom2ToBohr2() { return (1.0 \/ bohr2ToAngstrom2()); }$/;"	f
angstrom3ToBohr3	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^double angstrom3ToBohr3() { return (1.0 \/ bohr3ToAngstrom3()); }$/;"	f
angstromToBohr	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^double angstromToBohr() { return (1.0 \/ bohrToAngstrom()); }$/;"	f
anisotropicIEFMatrix	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^Eigen::MatrixXd anisotropicIEFMatrix(const ICavity & cav,$/;"	f	namespace:pcm::solver::detail
anisotropicRinfinity	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^Eigen::MatrixXd anisotropicRinfinity(const ICavity & cav,$/;"	f	namespace:pcm::solver::detail
anisotropicTEpsilon	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^Eigen::MatrixXd anisotropicTEpsilon(const ICavity & cav,$/;"	f	namespace:pcm::solver::detail
arcs	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Matrix3Xd arcs() const { return arcs_; }$/;"	f	class:pcm::cavity::__final
arcs_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Matrix3Xd arcs_;$/;"	m	class:pcm::cavity::__final
area	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  double area;$/;"	m	struct:pcm::CavityData
area	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  double area() const { return area_; }$/;"	f	class:pcm::cavity::__final
area_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  double area_;$/;"	m	class:pcm::cavity::__final
area_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double area_;$/;"	m	class:pcm::Input
around	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_utils.f90	/^  subroutine around(/;"	s	module:pedra_utils
atoms	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  int atoms(size_t i) const { return atoms_[i]; }$/;"	f	class:pcm::Input
atoms	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<int> atoms() const { return atoms_; }$/;"	f	class:pcm::Input
atoms	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Atom atoms(int i) const { return atoms_[i]; }$/;"	f	class:pcm::Molecule
atoms	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  std::vector<Atom> atoms() const { return atoms_; }$/;"	f	class:pcm::Molecule
atoms_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<int> atoms_;$/;"	m	class:pcm::Input
atoms_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  std::vector<Atom> atoms_;$/;"	m	class:pcm::Molecule
averageArea	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^  double averageArea;$/;"	m	class:pcm::cavity::__final
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BoundaryIntegralOperator.hpp	/^namespace bi_operators {$/;"	n	namespace:pcm
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^namespace bi_operators {$/;"	n	namespace:pcm	file:
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.hpp	/^namespace bi_operators {$/;"	n	namespace:pcm
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^namespace bi_operators {$/;"	n	namespace:pcm	file:
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^namespace bi_operators {$/;"	n	namespace:pcm
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^namespace bi_operators {$/;"	n	namespace:pcm	file:
bi_operators	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.hpp	/^namespace bi_operators {$/;"	n	namespace:pcm
blockRinfinity_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  std::vector<Eigen::MatrixXd> blockRinfinity_;$/;"	m	class:pcm::solver::IEFSolver
blockS_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  std::vector<Eigen::MatrixXd> blockS_;$/;"	m	class:pcm::solver::CPCMSolver
blockTepsilon_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  std::vector<Eigen::MatrixXd> blockTepsilon_;$/;"	m	class:pcm::solver::IEFSolver
bohr2ToAngstrom2	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^double bohr2ToAngstrom2() { return std::pow(bohrToAngstrom(), 2); }$/;"	f
bohr3ToAngstrom3	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^double bohr3ToAngstrom3() { return std::pow(bohrToAngstrom(), 3); }$/;"	f
bohrToAngstrom	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^LengthConversion bohrToAngstrom;$/;"	v
bootstrapFactory	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BoundaryIntegralOperator.hpp	/^inline Factory<detail::CreateBIOperator> bootstrapFactory() {$/;"	f	namespace:pcm::bi_operators
bootstrapFactory	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Cavity.hpp	/^inline Factory<detail::CreateCavity> bootstrapFactory() {$/;"	f	namespace:pcm::cavity
bootstrapFactory	/mnt/HD/software/pcmsolver-1.2.1/src/green/Green.hpp	/^inline Factory<detail::CreateGreensFunction> bootstrapFactory() {$/;"	f	namespace:pcm::green
bootstrapFactory	/mnt/HD/software/pcmsolver-1.2.1/src/solver/Solver.hpp	/^inline Factory<detail::CreateSolver> bootstrapFactory() {$/;"	f	namespace:pcm::solver
bootstrapRadiiSet	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^Factory<detail::CreateRadiiSet> bootstrapRadiiSet() {$/;"	f	namespace:pcm::utils
build	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^void GePolCavity::build(const std::string & suffix,$/;"	f	class:pcm::cavity::GePolCavity
build	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  void build() {$/;"	f	class:pcm::dielectric_profile::__final
buildAnisotropicMatrix	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^void IEFSolver::buildAnisotropicMatrix(const ICavity & cav,$/;"	f	class:pcm::solver::IEFSolver
buildGroup	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.cpp	/^Symmetry buildGroup(int _nr_gen, int _gen1, int _gen2, int _gen3) {$/;"	f
buildIsotropicMatrix	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^void IEFSolver::buildIsotropicMatrix(const ICavity & cav,$/;"	f	class:pcm::solver::IEFSolver
buildSystemMatrix	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  void buildSystemMatrix(const ICavity & cavity,$/;"	f	class:pcm::ISolver
buildSystemMatrix_impl	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.cpp	/^void CPCMSolver::buildSystemMatrix_impl(const ICavity & cavity,$/;"	f	class:pcm::solver::CPCMSolver
buildSystemMatrix_impl	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^void IEFSolver::buildSystemMatrix_impl(const ICavity & cavity,$/;"	f	class:pcm::solver::IEFSolver
build_point_group	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^    type(point_group) function build_point_group(/;"	f	module:pedra_symmetry
built	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  bool built;$/;"	m	class:pcm::ICavity
built_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  bool built_;$/;"	m	class:pcm::ISolver
callbacks_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  CallbackMap callbacks_;$/;"	m	class:pcm::detail::BaseFactory
carray_to_fstring	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_utils.f90	/^  pure function carray_to_fstring(/;"	f	module:strings
cavFilename_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string cavFilename_;$/;"	m	class:pcm::Input
cavder	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    subroutine cavder(/;"	s	module:pedra_cavity_derivatives
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Cavity.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.cpp	/^namespace cavity {$/;"	n	namespace:pcm	file:
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^namespace cavity {$/;"	n	namespace:pcm	file:
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.cpp	/^namespace cavity {$/;"	n	namespace:pcm	file:
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavity	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^namespace cavity {$/;"	n	namespace:pcm
cavityParams	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^CavityData Input::cavityParams() const {$/;"	f	class:pcm::Input
cavityType	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  std::string cavityType;$/;"	m	struct:pcm::CavityData
cavityType_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string cavityType_;$/;"	m	class:pcm::Input
cavity_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  ICavity * cavity_;$/;"	m	class:pcm::__final
cavspl	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine cavspl(/;"	s	module:pedra_cavity
center	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Vector3d center() const { return center_; }$/;"	f	class:pcm::cavity::__final
center	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  double center;$/;"	m	struct:pcm::GreenData
center	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  Eigen::Vector3d center;$/;"	m	struct:pcm::utils::Sphere
center12_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double center12_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
center23_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double center23_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
centerOfMass	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Eigen::Vector3d Molecule::centerOfMass() {$/;"	f	class:pcm::Molecule
center_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Vector3d center_;$/;"	m	class:pcm::cavity::__final
center_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double center_;$/;"	m	class:pcm::dielectric_profile::OneLayerErf
center_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double center_;$/;"	m	class:pcm::dielectric_profile::OneLayerLog
center_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double center_;$/;"	m	class:pcm::dielectric_profile::OneLayerTanh
center_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double center_;$/;"	m	class:pcm::Input
charge	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  double charge;$/;"	m	struct:pcm::utils::Atom
charges	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Eigen::VectorXd charges() const { return charges_; }$/;"	f	class:pcm::Molecule
charges	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  double charges(int i) const { return charges_(i); }$/;"	f	class:pcm::Molecule
charges_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Eigen::VectorXd charges_;$/;"	m	class:pcm::Molecule
chktss	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    logical function chktss(/;"	f	module:pedra_cavity
citation_message	/mnt/HD/software/pcmsolver-1.2.1/include/Citation.hpp	/^inline std::string citation_message() {$/;"	f
close_ostream	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^  virtual void close_ostream() {$/;"	f	class:logging::FileLogPolicy
cnpy	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^namespace cnpy {$/;"	n
cnpy	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^namespace cnpy {$/;"	n
coarse	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^enum printLevel { timings, coarse, fine, everything };$/;"	e	enum:logging::printLevel
coefficientCoulomb	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::coefficientCoulomb($/;"	f	class:pcm::green::SphericalDiffuse
coefficientCoulombDerivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::coefficientCoulombDerivative($/;"	f	class:pcm::green::SphericalDiffuse
coefficient_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::coefficient_impl($/;"	f	class:pcm::green::SphericalDiffuse
compute	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  void compute(const ProfileEvaluator & eval, const IntegratorParameters & parms) {$/;"	f	class:pcm::green::__final
computeASC	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::computeASC(const std::string & mep_name,$/;"	f	class:pcm::Meddle
computeCharge	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  Eigen::VectorXd computeCharge(const Eigen::VectorXd & potential,$/;"	f	class:pcm::ISolver
computeCharge_impl	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.cpp	/^Eigen::VectorXd CPCMSolver::computeCharge_impl(const Eigen::VectorXd & potential,$/;"	f	class:pcm::solver::CPCMSolver
computeCharge_impl	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^Eigen::VectorXd IEFSolver::computeCharge_impl(const Eigen::VectorXd & potential,$/;"	f	class:pcm::solver::IEFSolver
computeD	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.cpp	/^Eigen::MatrixXd IBoundaryIntegralOperator::computeD($/;"	f	class:pcm::IBoundaryIntegralOperator
computeD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^Eigen::MatrixXd Collocation::computeD_impl(const std::vector<Element> & elems,$/;"	f	class:pcm::bi_operators::Collocation
computeD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^Eigen::MatrixXd Numerical::computeD_impl(const std::vector<Element> & elems,$/;"	f	class:pcm::bi_operators::Numerical
computeD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^Eigen::MatrixXd Purisima::computeD_impl(const std::vector<Element> & elems,$/;"	f	class:pcm::bi_operators::Purisima
computeDipolarPotential	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.cpp	/^Eigen::VectorXd computeDipolarPotential(const Eigen::Matrix3Xd & grid,$/;"	f	namespace:pcm::utils
computeDipolarPotential	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.cpp	/^Eigen::VectorXd computeDipolarPotential(const GFDerivative & gf,$/;"	f	namespace:pcm::utils
computeMEP	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Eigen::VectorXd computeMEP(const Molecule & mol, const Eigen::Matrix3Xd & grid) {$/;"	f	namespace:pcm
computeMEP	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Eigen::VectorXd computeMEP(const Molecule & mol, const std::vector<Element> & el) {$/;"	f	namespace:pcm
computeMEP	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Eigen::VectorXd computeMEP(const std::vector<Element> & el,$/;"	f	namespace:pcm
computeNewtonPotential	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.cpp	/^Eigen::VectorXd computeNewtonPotential(const GFValue & gf,$/;"	f	namespace:pcm::utils
computePolarizationEnergy	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^double pcm::Meddle::computePolarizationEnergy(const std::string & mep_name,$/;"	f	class:pcm::Meddle
computeResponseASC	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::computeResponseASC(const std::string & mep_name,$/;"	f	class:pcm::Meddle
computeS	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.cpp	/^Eigen::MatrixXd IBoundaryIntegralOperator::computeS($/;"	f	class:pcm::IBoundaryIntegralOperator
computeS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^Eigen::MatrixXd Collocation::computeS_impl(const std::vector<Element> & elems,$/;"	f	class:pcm::bi_operators::Collocation
computeS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^Eigen::MatrixXd Numerical::computeS_impl(const std::vector<Element> & elems,$/;"	f	class:pcm::bi_operators::Numerical
computeS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^Eigen::MatrixXd Purisima::computeS_impl(const std::vector<Element> & elems,$/;"	f	class:pcm::bi_operators::Purisima
convBool	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^bool Getkw::convBool(const string & val) {$/;"	f	class:Getkw
convKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^int Getkw::convKind(const string & typ) {$/;"	f	class:Getkw
copyKeys	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^void Section::copyKeys(const Section & s) {$/;"	f	class:Section
copySects	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^void Section::copySects(const Section & s) {$/;"	f	class:Section
correction	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double correction() const { return correction_; }$/;"	f	class:pcm::Input
correction	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverData.hpp	/^  double correction;$/;"	m	struct:pcm::SolverData
correction_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double correction_;$/;"	m	class:pcm::Input
correction_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  double correction_;$/;"	m	class:pcm::solver::CPCMSolver
create	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  typename std::result_of<CreateObject(ObjectInputArgs...)>::type create($/;"	f	class:pcm::__final
createAnisotropicLiquid	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^IGreensFunction * createAnisotropicLiquid(const GreenData & data) {$/;"	f	namespace:pcm::green
createCPCMSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.cpp	/^ISolver * createCPCMSolver(const SolverData & data) {$/;"	f	namespace:pcm::solver
createCollocation	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^IBoundaryIntegralOperator * createCollocation(const BIOperatorData & data) {$/;"	f	namespace:pcm::bi_operators
createGePolCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^ICavity * createGePolCavity(const CavityData & data) {$/;"	f	namespace:pcm::cavity
createIEFSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^ISolver * createIEFSolver(const SolverData & data) {$/;"	f	namespace:pcm::solver
createIonicLiquid	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^IGreensFunction * createIonicLiquid(const GreenData & data) {$/;"	f	namespace:pcm::green
createNumerical	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^IBoundaryIntegralOperator * createNumerical(const BIOperatorData & \/* data *\/) {$/;"	f	namespace:pcm::bi_operators
createPurisima	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^IBoundaryIntegralOperator * createPurisima(const BIOperatorData & data) {$/;"	f	namespace:pcm::bi_operators
createRestartCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.cpp	/^ICavity * createRestartCavity(const CavityData & data) {$/;"	f	namespace:pcm::cavity
createSphericalDiffuse	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^IGreensFunction * createSphericalDiffuse(const GreenData & data) {$/;"	f	namespace:pcm::green
createSphericalSharp	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^IGreensFunction * createSphericalSharp(const GreenData & data) {$/;"	f	namespace:pcm::green
createUniformDielectric	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^IGreensFunction * createUniformDielectric(const GreenData & data) {$/;"	f	namespace:pcm::green
createVacuum	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^IGreensFunction * createVacuum(const GreenData & \/* data *\/) {$/;"	f	namespace:pcm::green
create_npy_header	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^std::vector<char> create_npy_header(const T * \/* data *\/,$/;"	f	namespace:cnpy
cur	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const Section * cur;$/;"	m	class:Getkw
custom	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^namespace custom {$/;"	n	namespace:cnpy
dasum	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    real(kind=dp) function dasum(/;"	f	module:pedra_dblas
data	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^  char * data;$/;"	m	struct:cnpy::NpyArray
daxpy	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    subroutine daxpy(/;"	s	module:pedra_dblas
dcopy	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    subroutine dcopy(/;"	s	module:pedra_dblas
debug	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	66;"	d
delta_	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  double delta_;$/;"	m	class:pcm::green::GreensFunction
derivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double derivative(double point) const {$/;"	f	class:pcm::dielectric_profile::MembraneTanh
derivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double derivative(double point) const {$/;"	f	class:pcm::dielectric_profile::OneLayerErf
derivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double derivative(double point) const {$/;"	f	class:pcm::dielectric_profile::OneLayerLog
derivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double derivative(double point) const {$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
derivativeProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^double derivativeProbe($/;"	f	namespace:green
derivativeProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^double derivativeProbe(const DifferentiableFunction & functor,$/;"	f	namespace:green
derivativeProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  double derivativeProbe(const Eigen::Vector3d & normal_p2,$/;"	f	class:pcm::green::GreensFunction
derivativeSource	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^double derivativeSource($/;"	f	namespace:green
derivativeSource	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^double derivativeSource(const DifferentiableFunction & functor,$/;"	f	namespace:green
derivativeSource	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  double derivativeSource(const Eigen::Vector3d & normal_p1,$/;"	f	class:pcm::green::GreensFunction
derivative_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double derivative_impl(double point) const {$/;"	f	class:pcm::green::__final
destruct	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^  void destruct() { delete[] data; }$/;"	f	struct:cnpy::NpyArray
destruct	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^  void destruct() {$/;"	f	struct:cnpy::npz_t
detEps	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  double detEps() const { return detEps_; }$/;"	f	class:pcm::dielectric_profile::__final
detEps_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  double detEps_;$/;"	m	class:pcm::dielectric_profile::__final
detail	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BoundaryIntegralOperator.hpp	/^namespace detail {$/;"	n	namespace:pcm::bi_operators
detail	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Cavity.hpp	/^namespace detail {$/;"	n	namespace:pcm::cavity
detail	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.cpp	/^namespace detail {$/;"	n	namespace:pcm::cavity	file:
detail	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^namespace detail {$/;"	n	namespace:pcm::cavity
detail	/mnt/HD/software/pcmsolver-1.2.1/src/green/Green.hpp	/^namespace detail {$/;"	n	namespace:pcm::green
detail	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^namespace detail {$/;"	n	namespace:pcm::green
detail	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^namespace detail {$/;"	n	namespace:pcm::green
detail	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^namespace detail {$/;"	n	namespace:pcm	file:
detail	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^namespace detail {$/;"	n	namespace:pcm
detail	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^namespace detail {$/;"	n	namespace:pcm	file:
detail	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^namespace detail {$/;"	n	namespace:pcm
detail	/mnt/HD/software/pcmsolver-1.2.1/src/solver/Solver.hpp	/^namespace detail {$/;"	n	namespace:pcm::solver
detail	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^namespace detail {$/;"	n	namespace:pcm::solver	file:
detail	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.hpp	/^namespace detail {$/;"	n	namespace:pcm::solver
detail	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^namespace detail {$/;"	n	namespace:pcm::utils	file:
detail	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^namespace detail {$/;"	n	namespace:pcm::utils
detail	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^namespace detail {$/;"	n	namespace:pcm
detail	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^namespace detail {$/;"	n	namespace:pcm::utils	file:
detail	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^namespace detail {$/;"	n	namespace:pcm::utils
diagonalDi	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^inline double diagonalDi(double area, double radius, double factor) {$/;"	f	namespace:pcm::green::detail
diagonalSi	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^inline double diagonalSi(double area, double factor) {$/;"	f	namespace:pcm::green::detail
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dielectric_profile	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^namespace dielectric_profile {$/;"	n	namespace:pcm
dipoles	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^  Eigen::Matrix3Xd dipoles;$/;"	m	struct:pcm::utils::ChargeDistribution
dipolesSites	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^  Eigen::Matrix3Xd dipolesSites;$/;"	m	struct:pcm::utils::ChargeDistribution
distance	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^inline DerivativeTraits distance(DerivativeTraits u[3], DerivativeTraits v[3]) {$/;"	f	namespace:pcm
dnorm2	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    real(kind=dp) function dnorm2(/;"	f	module:pedra_dblas
domain_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  std::pair<double, double> domain_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
domain_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  std::pair<double, double> domain_;$/;"	m	class:pcm::dielectric_profile::OneLayerErf
domain_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  std::pair<double, double> domain_;$/;"	m	class:pcm::dielectric_profile::OneLayerLog
domain_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  std::pair<double, double> domain_;$/;"	m	class:pcm::dielectric_profile::OneLayerTanh
dot_product	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^inline DerivativeTraits dot_product(DerivativeTraits u[3], DerivativeTraits v[3]) {$/;"	f	namespace:pcm
doubleLayer	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  double doubleLayer(const Element & e, double factor) const {$/;"	f	class:pcm::IGreensFunction
doubleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^double AnisotropicLiquid<DerivativeTraits>::doubleLayer_impl($/;"	f	class:pcm::green::AnisotropicLiquid
doubleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^double IonicLiquid<DerivativeTraits>::doubleLayer_impl(const Element & \/* e *\/,$/;"	f	class:pcm::green::IonicLiquid
doubleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::doubleLayer_impl(const Element & e,$/;"	f	class:pcm::green::SphericalDiffuse
doubleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<DerivativeTraits>::doubleLayer_impl(const Element & e,$/;"	f	class:pcm::green::SphericalSharp
doubleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^double UniformDielectric<DerivativeTraits>::doubleLayer_impl(const Element & e,$/;"	f	class:pcm::green::UniformDielectric
doubleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^double Vacuum<DerivativeTraits>::doubleLayer_impl(const Element & e,$/;"	f	class:pcm::green::Vacuum
dp	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^integer, parameter :: dp /;"	v	module:metal_sphere
dp	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_precision.f90	/^integer, parameter :: dp /;"	v	module:pedra_precision
drcncn	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    subroutine drcncn(/;"	s	module:pedra_cavity_derivatives
drcnrd	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    subroutine drcnrd(/;"	s	module:pedra_cavity_derivatives
drrdcn	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    subroutine drrdcn(/;"	s	module:pedra_cavity_derivatives
drrdrd	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    subroutine drrdrd(/;"	s	module:pedra_cavity_derivatives
dscal	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    subroutine dscal(/;"	s	module:pedra_dblas
dswap	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    subroutine dswap(/;"	s	module:pedra_dblas
dzero	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    subroutine dzero(/;"	s	module:pedra_dblas
element	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  std::string element;$/;"	m	struct:pcm::utils::Atom
elementArea	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::VectorXd & elementArea() { return elementArea_; }$/;"	f	class:pcm::ICavity
elementArea	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::VectorXd & elementArea() const { return elementArea_; }$/;"	f	class:pcm::ICavity
elementArea	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  double elementArea(int i) const { return elementArea_(i); }$/;"	f	class:pcm::ICavity
elementArea	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  double elementArea(int i) { return elementArea_(i); }$/;"	f	class:pcm::ICavity
elementArea_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::VectorXd elementArea_;$/;"	m	class:pcm::ICavity
elementCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd & elementCenter() { return elementCenter_; }$/;"	f	class:pcm::ICavity
elementCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Vector3d elementCenter(int i) const { return elementCenter_.col(i); }$/;"	f	class:pcm::ICavity
elementCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Vector3d elementCenter(int i) { return elementCenter_.col(i); }$/;"	f	class:pcm::ICavity
elementCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::Matrix3Xd & elementCenter() const { return elementCenter_; }$/;"	f	class:pcm::ICavity
elementCenter_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd elementCenter_;$/;"	m	class:pcm::ICavity
elementNormal	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd & elementNormal() { return elementNormal_; }$/;"	f	class:pcm::ICavity
elementNormal	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Vector3d elementNormal(int i) const { return elementNormal_.col(i); }$/;"	f	class:pcm::ICavity
elementNormal	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Vector3d elementNormal(int i) { return elementNormal_.col(i); }$/;"	f	class:pcm::ICavity
elementNormal	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::Matrix3Xd & elementNormal() const { return elementNormal_; }$/;"	f	class:pcm::ICavity
elementNormal_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd elementNormal_;$/;"	m	class:pcm::ICavity
elementRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::VectorXd & elementRadius() { return elementRadius_; }$/;"	f	class:pcm::ICavity
elementRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::VectorXd & elementRadius() const { return elementRadius_; }$/;"	f	class:pcm::ICavity
elementRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  double elementRadius(int i) const { return elementRadius_(i); }$/;"	f	class:pcm::ICavity
elementRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  double elementRadius(int i) { return elementRadius_(i); }$/;"	f	class:pcm::ICavity
elementRadius_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::VectorXd elementRadius_;$/;"	m	class:pcm::ICavity
elementSphereCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd & elementSphereCenter() { return elementSphereCenter_; }$/;"	f	class:pcm::ICavity
elementSphereCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::Matrix3Xd & elementSphereCenter() const {$/;"	f	class:pcm::ICavity
elementSphereCenter_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd elementSphereCenter_;$/;"	m	class:pcm::ICavity
elements	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Element & elements(int i) const { return elements_[i]; }$/;"	f	class:pcm::ICavity
elements	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const std::vector<Element> & elements() const { return elements_; }$/;"	f	class:pcm::ICavity
elements_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  std::vector<Element> elements_;$/;"	m	class:pcm::ICavity
epsDynamic	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^  double epsDynamic;$/;"	m	struct:pcm::utils::Solvent
epsStatic	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^  double epsStatic;$/;"	m	struct:pcm::utils::Solvent
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  double epsilon;$/;"	m	struct:pcm::GreenData
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^pcm::tuple<double, double> SphericalDiffuse<ProfilePolicy>::epsilon($/;"	f	class:pcm::green::SphericalDiffuse
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  const Eigen::Matrix3d & epsilon() const { return epsilon_; }$/;"	f	class:pcm::dielectric_profile::__final
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^  std::complex<double> epsilon;$/;"	m	struct:pcm::dielectric_profile::__final
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^  double epsilon;$/;"	m	struct:pcm::dielectric_profile::__final
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^  double epsilon;$/;"	m	struct:pcm::dielectric_profile::__final
epsilon	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^  double epsilon;$/;"	m	struct:pcm::dielectric_profile::__final
epsilon1	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  double epsilon1;$/;"	m	struct:pcm::GreenData
epsilon1_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double epsilon1_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
epsilon1_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double epsilon1_;$/;"	m	class:pcm::dielectric_profile::OneLayerErf
epsilon1_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double epsilon1_;$/;"	m	class:pcm::dielectric_profile::OneLayerLog
epsilon1_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double epsilon1_;$/;"	m	class:pcm::dielectric_profile::OneLayerTanh
epsilon2	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  double epsilon2;$/;"	m	struct:pcm::GreenData
epsilon2_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double epsilon2_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
epsilon2_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double epsilon2_;$/;"	m	class:pcm::dielectric_profile::OneLayerErf
epsilon2_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double epsilon2_;$/;"	m	class:pcm::dielectric_profile::OneLayerLog
epsilon2_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double epsilon2_;$/;"	m	class:pcm::dielectric_profile::OneLayerTanh
epsilon3_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double epsilon3_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
epsilonDynamic1_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonDynamic1_;$/;"	m	class:pcm::Input
epsilonDynamic2_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonDynamic2_;$/;"	m	class:pcm::Input
epsilonDynamicOutside_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonDynamicOutside_;$/;"	m	class:pcm::Input
epsilonInside_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonInside_;$/;"	m	class:pcm::Input
epsilonInv	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  const Eigen::Matrix3d & epsilonInv() const { return epsilonInv_; }$/;"	f	class:pcm::dielectric_profile::__final
epsilonInv_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Eigen::Matrix3d epsilonInv_;$/;"	m	class:pcm::dielectric_profile::__final
epsilonLab_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Eigen::Vector3d epsilonLab_;$/;"	m	class:pcm::dielectric_profile::__final
epsilonSolvent	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^  double epsilonSolvent;$/;"	m	struct:pcm::dielectric_profile::__final
epsilonStatic1_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonStatic1_;$/;"	m	class:pcm::Input
epsilonStatic2_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonStatic2_;$/;"	m	class:pcm::Input
epsilonStaticOutside_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double epsilonStaticOutside_;$/;"	m	class:pcm::Input
epsilonTensor	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  Eigen::Vector3d epsilonTensor;$/;"	m	struct:pcm::GreenData
epsilon_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Eigen::Matrix3d epsilon_;$/;"	m	class:pcm::dielectric_profile::__final
eulerAngles	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  Eigen::Vector3d eulerAngles;$/;"	m	struct:pcm::GreenData
eulerAngles_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  Eigen::Vector3d eulerAngles_;$/;"	m	class:pcm::dielectric_profile::__final
eulerRotation	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void eulerRotation(Eigen::Matrix3d & R_,$/;"	f	namespace:pcm::utils
eval_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  ProfileEvaluator eval_;$/;"	m	class:pcm::green::detail::LnTransformedRadial
everything	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^enum printLevel { timings, coarse, fine, everything };$/;"	e	enum:logging::printLevel
exportDerivativeProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  DerivativeProbe exportDerivativeProbe() const {$/;"	f	class:pcm::IGreensFunction
exportDerivativeProbe_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^DerivativeProbe AnisotropicLiquid<DerivativeTraits>::exportDerivativeProbe_impl()$/;"	f	class:pcm::green::AnisotropicLiquid
exportDerivativeProbe_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^DerivativeProbe IonicLiquid<DerivativeTraits>::exportDerivativeProbe_impl() const {$/;"	f	class:pcm::green::IonicLiquid
exportDerivativeProbe_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^DerivativeProbe SphericalDiffuse<DerivativeTraits>::exportDerivativeProbe_impl()$/;"	f	class:pcm::green::SphericalDiffuse
exportDerivativeProbe_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^DerivativeProbe SphericalSharp<DerivativeTraits>::exportDerivativeProbe_impl()$/;"	f	class:pcm::green::SphericalSharp
exportDerivativeProbe_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^DerivativeProbe UniformDielectric<DerivativeTraits>::exportDerivativeProbe_impl()$/;"	f	class:pcm::green::UniformDielectric
exportDerivativeProbe_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^DerivativeProbe Vacuum<DerivativeTraits>::exportDerivativeProbe_impl() const {$/;"	f	class:pcm::green::Vacuum
exportKernelD	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  KernelD exportKernelD() const { return exportKernelD_impl(); }$/;"	f	class:pcm::IGreensFunction
exportKernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^KernelD AnisotropicLiquid<DerivativeTraits>::exportKernelD_impl() const {$/;"	f	class:pcm::green::AnisotropicLiquid
exportKernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^KernelD IonicLiquid<DerivativeTraits>::exportKernelD_impl() const {$/;"	f	class:pcm::green::IonicLiquid
exportKernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^KernelD SphericalDiffuse<ProfilePolicy>::exportKernelD_impl() const {$/;"	f	class:pcm::green::SphericalDiffuse
exportKernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^KernelD SphericalSharp<DerivativeTraits>::exportKernelD_impl() const {$/;"	f	class:pcm::green::SphericalSharp
exportKernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^KernelD UniformDielectric<DerivativeTraits>::exportKernelD_impl() const {$/;"	f	class:pcm::green::UniformDielectric
exportKernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^KernelD Vacuum<DerivativeTraits>::exportKernelD_impl() const {$/;"	f	class:pcm::green::Vacuum
exportKernelS	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  KernelS exportKernelS() const { return exportKernelS_impl(); }$/;"	f	class:pcm::IGreensFunction
exportKernelS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^KernelS AnisotropicLiquid<DerivativeTraits>::exportKernelS_impl() const {$/;"	f	class:pcm::green::AnisotropicLiquid
exportKernelS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^KernelS IonicLiquid<DerivativeTraits>::exportKernelS_impl() const {$/;"	f	class:pcm::green::IonicLiquid
exportKernelS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^KernelS SphericalDiffuse<ProfilePolicy>::exportKernelS_impl() const {$/;"	f	class:pcm::green::SphericalDiffuse
exportKernelS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^KernelS SphericalSharp<DerivativeTraits>::exportKernelS_impl() const {$/;"	f	class:pcm::green::SphericalSharp
exportKernelS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^KernelS UniformDielectric<DerivativeTraits>::exportKernelS_impl() const {$/;"	f	class:pcm::green::UniformDielectric
exportKernelS_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^KernelS Vacuum<DerivativeTraits>::exportKernelS_impl() const {$/;"	f	class:pcm::green::Vacuum
factor_	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.hpp	/^  double factor_;$/;"	m	class:pcm::bi_operators::__final
factor_	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.hpp	/^  double factor_;$/;"	m	class:pcm::bi_operators::__final
file	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.hpp	/^  std::string file;$/;"	m	class:pcm::cavity::__final
file	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  std::string file;$/;"	m	class:Getkw
filename	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  std::string filename;$/;"	m	struct:pcm::CavityData
findRotorType	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^rotorType Molecule::findRotorType() {$/;"	f	class:pcm::Molecule
fine	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^enum printLevel { timings, coarse, fine, everything };$/;"	e	enum:logging::printLevel
fitScalar	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  double fitScalar(double x) const { return (x - xMin_) \/ (xMax_ - xMin_); }$/;"	f	class:__final
fitVector	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  Eigen::RowVectorXd fitVector(const Eigen::VectorXd & x_vec) const {$/;"	f	class:__final
fivePointStencil	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Stencils.hpp	/^inline double fivePointStencil(const DifferentiableFunction & func,$/;"	f
fortran_order	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^  bool fortran_order;$/;"	m	struct:cnpy::NpyArray
fromSolvent	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool fromSolvent() const { return hasSolvent_; }$/;"	f	class:pcm::Input
fstring_to_carray	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_utils.f90	/^  pure function fstring_to_carray(/;"	f	module:strings
function_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  RadialSolution function_;$/;"	m	class:pcm::green::__final
function_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double function_impl(double point) const {$/;"	f	class:pcm::green::__final
functions_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  SurfaceFunctionMap functions_;$/;"	m	class:pcm::__final
gaubon	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine gaubon(/;"	s	module:pedra_cavity
generatecavity_cpp	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_interface.F90	/^subroutine generatecavity_cpp(/;"	s
generators	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  int generators(int i) const { return generators_[i]; }$/;"	f	class:Symmetry
generators_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  int generators_[3];$/;"	m	class:Symmetry
geometry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Eigen::Matrix3Xd geometry() const { return geometry_; }$/;"	f	class:pcm::Molecule
geometry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  double geometry(int i, int j) const { return geometry_(i, j); }$/;"	f	class:pcm::Molecule
geometry_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<double> geometry_;$/;"	m	class:pcm::Input
geometry_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Eigen::Matrix3Xd geometry_;$/;"	m	class:pcm::Molecule
get	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^template <class T> const T & Getkw::get(const string & path) const {$/;"	f	class:Getkw
get	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  const T & get() const { return val; }$/;"	f	class:Keyword
get	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^template <class T> const T & Section::get(const string & path) const {$/;"	f	class:Section
getASCDipole	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^double pcm::Meddle::getASCDipole(const std::string & asc_name,$/;"	f	class:pcm::Meddle
getAreas	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::getAreas(double areas[]) const {$/;"	f	class:pcm::Meddle
getBool	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  bool getBool(const std::string & path) const { return get<bool>(path); }$/;"	f	class:Getkw
getBool	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  bool getBool(const std::string & path) const { return get<bool>(path); }$/;"	f	class:Section
getBoolVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const std::vector<bool> getBoolVec(const std::string & path) const {$/;"	f	class:Getkw
getBoolVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::vector<bool> getBoolVec(const std::string & path) const {$/;"	f	class:Section
getCavitySize	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^PCMSolverIndex pcm::Meddle::getCavitySize() const { return cavity_->size(); }$/;"	f	class:pcm::Meddle
getCenter	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::getCenter(int its, double center[]) const {$/;"	f	class:pcm::Meddle
getCenters	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^Eigen::Matrix3Xd Meddle::getCenters() const { return cavity_->elementCenter(); }$/;"	f	class:pcm::Meddle
getCenters	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::getCenters(double centers[]) const {$/;"	f	class:pcm::Meddle
getData	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const std::vector<std::string> getData(const std::string & path) const {$/;"	f	class:Getkw
getData	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::vector<std::string> getData(const std::string & path) const {$/;"	f	class:Section
getDbl	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  double getDbl(const std::string & path) const { return get<double>(path); }$/;"	f	class:Getkw
getDbl	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  double getDbl(const std::string & path) const { return get<double>(path); }$/;"	f	class:Section
getDblVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const std::vector<double> getDblVec(const std::string & path) const {$/;"	f	class:Getkw
getDblVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::vector<double> getDblVec(const std::string & path) const {$/;"	f	class:Section
getInt	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  int getInt(const std::string & path) const { return get<int>(path); }$/;"	f	class:Getkw
getInt	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  int getInt(const std::string & path) const { return get<int>(path); }$/;"	f	class:Section
getIntVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const std::vector<int> getIntVec(const std::string & path) const {$/;"	f	class:Getkw
getIntVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::vector<int> getIntVec(const std::string & path) const {$/;"	f	class:Section
getIrreducibleCavitySize	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^PCMSolverIndex pcm::Meddle::getIrreducibleCavitySize() const {$/;"	f	class:pcm::Meddle
getKey	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^const Keyword<T> & Section::getKey(const string & pathspec) const {$/;"	f	class:Section
getKeyword	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^template <class T> const Keyword<T> & Getkw::getKeyword(const string & path) const {$/;"	f	class:Getkw
getKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  int getKind() const { return kind; }$/;"	f	class:Keyword
getName	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  const std::string & getName() const { return name; }$/;"	f	class:Keyword
getName	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  std::string getName() const { return name; }$/;"	f	class:Section
getNamedKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  static const std::string & getNamedKind(int i) {$/;"	f	class:Keyword
getNkeys	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  int getNkeys() const { return nkeys; }$/;"	f	class:Section
getNsect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  int getNsect() const { return nsect; }$/;"	f	class:Section
getSect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^const Section & Getkw::getSect(const string & path) const {$/;"	f	class:Getkw
getSect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^const Section & Section::getSect(const string & pathspec) const {$/;"	f	class:Section
getStr	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const std::string & getStr(const std::string & path) const {$/;"	f	class:Getkw
getStr	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::string & getStr(const std::string & path) const {$/;"	f	class:Section
getStrVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  const std::vector<std::string> getStrVec(const std::string & path) const {$/;"	f	class:Getkw
getStrVec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::vector<std::string> getStrVec(const std::string & path) const {$/;"	f	class:Section
getSurfaceFunction	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::getSurfaceFunction(PCMSolverIndex size,$/;"	f	class:pcm::Meddle
getTag	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  const std::string & getTag() const { return tag; }$/;"	f	class:Section
getTime	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^inline std::string getTime() {$/;"	f	namespace:logging
get_cpu_time	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline double get_cpu_time() { return (double)clock() \/ CLOCKS_PER_SEC; }$/;"	f	namespace:timer
get_cpu_time	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline double get_cpu_time() {$/;"	f	namespace:timer
get_point_group	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^    subroutine get_point_group(/;"	s	module:pedra_symmetry
get_pt	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^    real(kind=dp) function get_pt(/;"	f	module:pedra_symmetry
get_timing	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline timing get_timing() {$/;"	f	namespace:timer
get_wall_time	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline double get_wall_time() {$/;"	f	namespace:timer
globalPrintLevel	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  void globalPrintLevel(int printLvl) { globalPrintLevel_ = printLvl; }$/;"	f	class:logging::logger
globalPrintLevel_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  printLevel globalPrintLevel_;$/;"	m	class:logging::logger
global_print_unit	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^    integer(kind=regint_k) :: global_print_unit$/;"	v	module:pedra_symmetry
gradientProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^Eigen::Vector3d gradientProbe($/;"	f	namespace:green
gradientProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^Eigen::Vector3d gradientProbe(const DifferentiableFunction & functor,$/;"	f	namespace:green
gradientProbe	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  Eigen::Vector3d gradientProbe(const Eigen::Vector3d & p1,$/;"	f	class:pcm::green::GreensFunction
gradientSource	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^Eigen::Vector3d gradientSource($/;"	f	namespace:green
gradientSource	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^Eigen::Vector3d gradientSource(const DifferentiableFunction & functor,$/;"	f	namespace:green
gradientSource	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  Eigen::Vector3d gradientSource(const Eigen::Vector3d & p1,$/;"	f	class:pcm::green::GreensFunction
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^namespace green {$/;"	n	namespace:pcm	file:
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/Green.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenUtils.hpp	/^namespace green {$/;"	n
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^namespace green {$/;"	n	namespace:pcm	file:
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^namespace green {$/;"	n	namespace:pcm	file:
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^namespace green {$/;"	n	namespace:pcm	file:
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^namespace green {$/;"	n	namespace:pcm	file:
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^namespace green {$/;"	n	namespace:pcm
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^namespace green {$/;"	n	namespace:pcm	file:
green	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^namespace green {$/;"	n	namespace:pcm
greenInsideType_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string greenInsideType_;$/;"	m	class:pcm::Input
greenOutsideType_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string greenOutsideType_;$/;"	m	class:pcm::Input
greensFunctionType	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  std::string greensFunctionType;$/;"	m	struct:pcm::GreenData
greens_function	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^    subroutine greens_function(/;"	s	module:metal_sphere
group	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    type(point_group)/;"	v	module:pedra_cavity
group_int	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: group_int$/;"	k	type:point_group
group_name	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      character(len=3) :: group_name$/;"	k	type:point_group
gsfera	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^    complex(kind=dp) function gsfera(/;"	f	module:metal_sphere
hasDynamic_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  bool hasDynamic_;$/;"	m	class:pcm::__final
hasSolvent_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool hasSolvent_;$/;"	m	class:pcm::Input
has_key	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^bool Section::has_key(const string & b) const {$/;"	f	class:Section
has_sect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^bool Section::has_sect(const string & b) const {$/;"	f	class:Section
has_tag	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^bool Section::has_tag(const string & b) const {$/;"	f	class:Section
hermitivitize	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool hermitivitize() const { return hermitivitize_; }$/;"	f	class:pcm::Input
hermitivitize	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverData.hpp	/^  bool hermitivitize;$/;"	m	struct:pcm::SolverData
hermitivitize	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void hermitivitize(Eigen::MatrixBase<Derived> & obj_) {$/;"	f	namespace:pcm::utils
hermitivitize_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool hermitivitize_;$/;"	m	class:pcm::Input
hermitivitize_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^  bool hermitivitize_;$/;"	m	class:pcm::solver::CPCMSolver
hermitivitize_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^  bool hermitivitize_;$/;"	m	class:pcm::solver::IEFSolver
hostWriter_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  Printer hostWriter_;$/;"	m	class:pcm::__final
host_writer	/mnt/HD/software/pcmsolver-1.2.1/src/bin/run_pcm.cpp	/^void host_writer(const char * message) {$/;"	f
iSphere	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  int iSphere() const { return iSphere_; }$/;"	f	class:pcm::cavity::__final
iSphere_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  int iSphere_;$/;"	m	class:pcm::cavity::__final
idamax	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    integer(kind=regint_k) function idamax(/;"	f	module:pedra_dblas
imagePotential	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::imagePotential($/;"	f	class:pcm::green::SphericalDiffuse
imagePotential	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<DerivativeTraits>::imagePotential($/;"	f	class:pcm::green::SphericalSharp
imagePotential	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<Stencil>::imagePotential(const Eigen::Vector3d & source,$/;"	f	class:pcm::green::SphericalSharp
imagePotentialComponent_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::imagePotentialComponent_impl($/;"	f	class:pcm::green::SphericalDiffuse
imagePotentialDerivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::imagePotentialDerivative($/;"	f	class:pcm::green::SphericalDiffuse
imagePotentialDerivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<DerivativeTraits>::imagePotentialDerivative($/;"	f	class:pcm::green::SphericalSharp
imagePotentialDerivative	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<Stencil>::imagePotentialDerivative($/;"	f	class:pcm::green::SphericalSharp
imagePotential_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^DerivativeTraits SphericalSharp<DerivativeTraits>::imagePotential_impl($/;"	f	class:pcm::green::SphericalSharp
inertiaTensor	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Eigen::Matrix3d Molecule::inertiaTensor() {$/;"	f	class:pcm::Molecule
infoStream_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  std::ostringstream infoStream_;$/;"	m	class:pcm::__final
initAllinger	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^RadiiSet initAllinger() {$/;"	f	namespace:pcm::utils::detail
initBohrToAngstrom	/mnt/HD/software/pcmsolver-1.2.1/src/interface/PhysicalConstants.cpp	/^void initBohrToAngstrom(LengthConversion & conversion, int year) {$/;"	f
initBondi	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^RadiiSet initBondi() {$/;"	f	namespace:pcm::utils::detail
initCavity	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void Meddle::initCavity() {$/;"	f	class:pcm::Meddle
initDynamicSolver	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void Meddle::initDynamicSolver() {$/;"	f	class:pcm::Meddle
initInput	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void Meddle::initInput(int nr_nuclei,$/;"	f	class:pcm::Meddle
initMolecule	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^void Input::initMolecule() {$/;"	f	class:pcm::Input
initMolecule	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^Molecule initMolecule(const Input & inp,$/;"	f	namespace:pcm::detail
initSpheresAtoms	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void initSpheresAtoms(const Input & inp,$/;"	f	namespace:pcm::detail
initSphericalDiffuse	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^void SphericalDiffuse<ProfilePolicy>::initSphericalDiffuse() {$/;"	f	class:pcm::green::SphericalDiffuse
initStaticSolver	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void Meddle::initStaticSolver() {$/;"	f	class:pcm::Meddle
initUFF	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^RadiiSet initUFF() {$/;"	f	namespace:pcm::utils::detail
initializeRule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^QuadratureRule initializeRule(int nNodes) {$/;"	f	namespace:pcm::utils::detail
input_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^  Input input_;$/;"	m	class:pcm::__final
insertTiming	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^  void insertTiming(const TimingsPair & p) { timings_.insert(p); }$/;"	f	class:timer::Timer
insideGreenParams	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^GreenData Input::insideGreenParams() const {$/;"	f	class:pcm::Input
integrateD	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^double integrateD(const KernelD & F, const Element & e) {$/;"	f	namespace:pcm::bi_operators
integrateS	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^double integrateS(const KernelS & F, const Element & e) {$/;"	f	namespace:pcm::bi_operators
integratorParams	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^BIOperatorData Input::integratorParams() const {$/;"	f	class:pcm::Input
integratorScaling	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double integratorScaling() const { return integratorScaling_; }$/;"	f	class:pcm::Input
integratorScaling_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double integratorScaling_;$/;"	m	class:pcm::Input
integratorType	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BIOperatorData.hpp	/^  std::string integratorType;$/;"	m	struct:pcm::BIOperatorData
integratorType_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string integratorType_;$/;"	m	class:pcm::Input
invalid	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^bool invalid(const Atom & atom) {$/;"	f	namespace:pcm
iprsol	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    integer(kind=regint_k) :: iprsol$/;"	v	module:pedra_cavity
irreducible	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  bool irreducible() const { return irreducible_; }$/;"	f	class:pcm::cavity::__final
irreducible_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  bool irreducible_;$/;"	m	class:pcm::cavity::__final
irreducible_size	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  PCMSolverIndex irreducible_size() const { return nIrrElements_; }$/;"	f	class:pcm::ICavity
irreducible_size	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  PCMSolverIndex irreducible_size() { return nIrrElements_; }$/;"	f	class:pcm::ICavity
isArray	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool isArray;$/;"	m	class:Keyword
isBuilt	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  bool isBuilt() { return built; }$/;"	f	class:pcm::ICavity
isDefd	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool isDefd;$/;"	m	class:Keyword
isDefd	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  bool isDefd;$/;"	m	class:Section
isDefined	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool isDefined() const { return isDefd; }$/;"	f	class:Keyword
isDefined	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  bool isDefined() const { return isDefd; }$/;"	f	class:Section
isDynamic	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool isDynamic() const { return isDynamic_; }$/;"	f	class:pcm::Input
isDynamic_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool isDynamic_;$/;"	m	class:pcm::Input
isZero	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline bool isZero(double value, double threshold) {$/;"	f	namespace:pcm::utils
isotropicIEFMatrix	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^Eigen::MatrixXd isotropicIEFMatrix(const ICavity & cav,$/;"	f	namespace:pcm::solver::detail
isotropicRinfinity	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^Eigen::MatrixXd isotropicRinfinity(const ICavity & cav,$/;"	f	namespace:pcm::solver::detail
isotropicTEpsilon	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^Eigen::MatrixXd isotropicTEpsilon(const ICavity & cav,$/;"	f	namespace:pcm::solver::detail
isotropic_	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  bool isotropic_;$/;"	m	class:pcm::ISolver
isymax	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: isymax(/;"	k	type:point_group
jsop	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: jsop(/;"	k	type:point_group
kappa	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  double kappa;$/;"	m	struct:pcm::GreenData
kappa	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^  double kappa;$/;"	m	struct:pcm::dielectric_profile::__final
kernelD	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  double kernelD(const Eigen::Vector3d & direction,$/;"	f	class:pcm::IGreensFunction
kernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^double AnisotropicLiquid<DerivativeTraits>::kernelD_impl($/;"	f	class:pcm::green::AnisotropicLiquid
kernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^double IonicLiquid<DerivativeTraits>::kernelD_impl($/;"	f	class:pcm::green::IonicLiquid
kernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::kernelD_impl($/;"	f	class:pcm::green::SphericalDiffuse
kernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<DerivativeTraits>::kernelD_impl($/;"	f	class:pcm::green::SphericalSharp
kernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^double UniformDielectric<DerivativeTraits>::kernelD_impl($/;"	f	class:pcm::green::UniformDielectric
kernelD_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^double Vacuum<DerivativeTraits>::kernelD_impl(const Eigen::Vector3d & direction,$/;"	f	class:pcm::green::Vacuum
kernelS	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  double kernelS(const Eigen::Vector3d & p1, const Eigen::Vector3d & p2) const {$/;"	f	class:pcm::IGreensFunction
keys	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  std::map<std::string, boost::any> keys;$/;"	m	class:Section
kind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  int kind;$/;"	m	class:Keyword
l_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  int l_;$/;"	m	class:pcm::green::detail::LnTransformedRadial
largeint_k	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^integer, parameter :: largeint_k /;"	v	module:metal_sphere
largeint_k	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_precision.f90	/^integer, parameter :: largeint_k /;"	v	module:pedra_precision
left_trim	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string left_trim(const char * src) {$/;"	f	namespace:pcm::detail
left_trim	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string left_trim(std::string s) {$/;"	f	namespace:pcm::detail
legendre_polynomial	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^    real(kind=dp) function legendre_polynomial(/;"	f	module:metal_sphere
linearInterpolation	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline double linearInterpolation(const double point,$/;"	f	namespace:pcm::utils
loadCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^void ICavity::loadCavity(const std::string & fname) {$/;"	f	class:pcm::ICavity
loadSurfaceFunction	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::loadSurfaceFunction(const std::string & name) {$/;"	f	class:pcm::Meddle
load_the_npy_file	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^cnpy::NpyArray load_the_npy_file(FILE * fp) {$/;"	f
logStream_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  std::stringstream logStream_;$/;"	m	class:logging::logger
logger	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  logger(const std::string & name, printLevel print = coarse)$/;"	f	class:logging::logger
logger	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^template <typename logPolicy> class logger {$/;"	c	namespace:logging
logging	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^namespace logging {$/;"	n
logging	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^namespace logging {$/;"	n
lvpri	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    integer(kind=regint_k) :: lvpri$/;"	v	module:pedra_cavity
main	/mnt/HD/software/pcmsolver-1.2.1/src/bin/debug_wavcav.cpp	/^int main(int argc, char ** argv) {$/;"	f
main	/mnt/HD/software/pcmsolver-1.2.1/src/bin/run_pcm.cpp	/^int main(int argc, char * argv[]) {$/;"	f
map_type	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^char cnpy::map_type(const std::type_info & t) {$/;"	f	class:cnpy
mass	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  double mass;$/;"	m	struct:pcm::utils::Atom
masses	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Eigen::VectorXd masses() const { return masses_; }$/;"	f	class:pcm::Molecule
masses	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  double masses(int i) const { return masses_(i); }$/;"	f	class:pcm::Molecule
masses_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Eigen::VectorXd masses_;$/;"	m	class:pcm::Molecule
maxL	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  int maxL;$/;"	m	struct:pcm::GreenData
maxLC_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  int maxLC_; \/\/ = 2 * maxLGreen_;$/;"	m	class:pcm::green::__final
maxLGreen_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  int maxLGreen_;$/;"	m	class:pcm::green::__final
maxLGreen_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  int maxLGreen_;$/;"	m	class:pcm::green::__final
maxL_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  int maxL_;$/;"	m	class:pcm::Input
maxrep	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: maxrep$/;"	k	type:point_group
mediumInfo	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void Meddle::mediumInfo(IGreensFunction * gf_i, IGreensFunction * gf_o) {$/;"	f	class:pcm::Meddle
metal_sphere	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^module metal_sphere$/;"	m
minimalRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  double minimalRadius;$/;"	m	struct:pcm::CavityData
minimalRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^  double minimalRadius;$/;"	m	class:pcm::cavity::__final
minimalRadius_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double minimalRadius_;$/;"	m	class:pcm::Input
mode	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string mode() const { return mode_; }$/;"	f	class:pcm::Input
mode_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string mode_;$/;"	m	class:pcm::Input
molecule	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  Molecule molecule;$/;"	m	struct:pcm::CavityData
molecule	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  Molecule molecule() const { return molecule_; }$/;"	f	class:pcm::Input
molecule	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  void molecule(const Molecule & m) {$/;"	f	class:pcm::Input
molecule	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^Molecule Meddle::molecule() const { return input_.molecule(); }$/;"	f	class:pcm::Meddle
molecule_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Molecule molecule_;$/;"	m	class:pcm::ICavity
molecule_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  Molecule molecule_;$/;"	m	class:pcm::Input
monopoles	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^  Eigen::VectorXd monopoles;$/;"	m	struct:pcm::utils::ChargeDistribution
monopolesSites	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^  Eigen::Matrix3Xd monopolesSites;$/;"	m	struct:pcm::utils::ChargeDistribution
moveToCOM	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^void Molecule::moveToCOM() {$/;"	f	class:pcm::Molecule
moveToPAF	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^void Molecule::moveToPAF() {$/;"	f	class:pcm::Molecule
msg	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	/^  string msg;$/;"	m	class:GetkwError
msg	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	/^struct msg {$/;"	s	namespace:GetkwMessageStream
multipoles	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  ChargeDistribution multipoles() const { return multipoles_; }$/;"	f	class:pcm::Input
multipoles_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  ChargeDistribution multipoles_;$/;"	m	class:pcm::Input
nAtoms	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  size_t nAtoms() const { return nAtoms_; }$/;"	f	class:pcm::Molecule
nAtoms_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  size_t nAtoms_;$/;"	m	class:pcm::Molecule
nElements_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  PCMSolverIndex nElements_;$/;"	m	class:pcm::ICavity
nIrrElements_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  PCMSolverIndex nIrrElements_;$/;"	m	class:pcm::ICavity
nPoints	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  int nPoints() const { return nPoints_; }$/;"	f	class:pcm::utils::GaussLegendreRule
nPoints_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  int nPoints_;$/;"	m	class:pcm::utils::GaussLegendreRule
nSpheres	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  int nSpheres() const { return nSpheres_; }$/;"	f	class:pcm::ICavity
nSpheres	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  int nSpheres() { return nSpheres_; }$/;"	f	class:pcm::ICavity
nSpheres_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  int nSpheres_;$/;"	m	class:pcm::ICavity
nVertices	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  int nVertices() const { return nVertices_; }$/;"	f	class:pcm::cavity::__final
nVertices_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  int nVertices_;$/;"	m	class:pcm::cavity::__final
name	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^  std::string name;$/;"	m	struct:pcm::utils::Solvent
name	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  std::string name;$/;"	m	class:Keyword
name	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  std::string name;$/;"	m	class:Section
nkeys	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  int nkeys;$/;"	m	class:Section
norm	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^inline DerivativeTraits norm(DerivativeTraits u[3]) {$/;"	f	namespace:pcm
normal	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Vector3d normal() const { return normal_; }$/;"	f	class:pcm::cavity::__final
normal_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Vector3d normal_;$/;"	m	class:pcm::cavity::__final
npy_load	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> npy_load($/;"	f	namespace:cnpy::custom
npy_load	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^cnpy::NpyArray cnpy::npy_load(std::string fname) {$/;"	f	class:cnpy
npy_save	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void npy_save(const std::string & fname,$/;"	f	namespace:cnpy::custom
npy_save	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^void npy_save(std::string fname,$/;"	f	namespace:cnpy
npy_to_eigen	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> npy_to_eigen($/;"	f	namespace:cnpy::custom
npz_load	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^cnpy::NpyArray cnpy::npz_load(std::string fname, std::string varname) {$/;"	f	class:cnpy
npz_load	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^cnpy::npz_t cnpy::npz_load(std::string fname) {$/;"	f	class:cnpy
npz_save	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void npz_save(const std::string & fname,$/;"	f	namespace:cnpy::custom
npz_save	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^void npz_save(std::string zipname,$/;"	f	namespace:cnpy
npz_t	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^struct npz_t : public std::map<std::string, NpyArray> {$/;"	s	namespace:cnpy
nrGenerators	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  int nrGenerators() const { return nrGenerators_; }$/;"	f	class:Symmetry
nrGenerators_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  int nrGenerators_;$/;"	m	class:Symmetry
nrIrrep	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  int nrIrrep() const { return nrIrrep_; }$/;"	f	class:Symmetry
nrIrrep_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  int nrIrrep_;$/;"	m	class:Symmetry
nr_generators	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: nr_generators$/;"	k	type:point_group
nr_inversion	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: nr_inversion$/;"	k	type:point_group
nr_reflections	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: nr_reflections$/;"	k	type:point_group
nr_rotations	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^      integer(kind=regint_k)          :: nr_rotations$/;"	k	type:point_group
nsect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  int nsect;$/;"	m	class:Section
nuclearChargeDistribution	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.cpp	/^ChargeDistribution nuclearChargeDistribution(const Molecule & mol) {$/;"	f	namespace:pcm::utils
numericalZero	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline bool numericalZero(double value) { return (isZero(value, 1.0e-14)); }$/;"	f	namespace:pcm::utils
observer_step_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double observer_step_;$/;"	m	struct:pcm::green::detail::IntegratorParameters
omegaC_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  RadialFunction<detail::StateType, detail::LnTransformedRadial, Omega> omegaC_;$/;"	m	class:pcm::green::__final
omega_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^      omega_;$/;"	m	class:pcm::green::__final
open_ostream	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^  virtual void open_ostream(const std::string & name) {$/;"	f	class:logging::FileLogPolicy
operator ()	/mnt/HD/software/pcmsolver-1.2.1/include/PhysicalConstants.hpp	/^  double operator()() { return BOHR_TO_ANGSTROM; }$/;"	f	struct:LengthConversion
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^DerivativeTraits AnisotropicLiquid<DerivativeTraits>::operator()($/;"	f	class:pcm::green::AnisotropicLiquid
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  pcm::tuple<double, double> operator()(double point) const {$/;"	f	class:pcm::green::__final
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  void operator()(const StateType & rho, StateType & drhodr, const double y) {$/;"	f	class:pcm::green::detail::LnTransformedRadial
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^DerivativeTraits IonicLiquid<DerivativeTraits>::operator()($/;"	f	class:pcm::green::IonicLiquid
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^Stencil SphericalDiffuse<ProfilePolicy>::operator()(Stencil * sp,$/;"	f	class:pcm::green::SphericalDiffuse
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^DerivativeTraits SphericalSharp<DerivativeTraits>::operator()($/;"	f	class:pcm::green::SphericalSharp
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^Stencil SphericalSharp<Stencil>::operator()(Stencil * sp, Stencil * pp) const {$/;"	f	class:pcm::green::SphericalSharp
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^DerivativeTraits UniformDielectric<DerivativeTraits>::operator()($/;"	f	class:pcm::green::UniformDielectric
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^DerivativeTraits Vacuum<DerivativeTraits>::operator()(DerivativeTraits * sp,$/;"	f	class:pcm::green::Vacuum
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  pcm::tuple<double, double> operator()(const double r) const {$/;"	f	class:pcm::dielectric_profile::MembraneTanh
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  pcm::tuple<double, double> operator()(const double r) const {$/;"	f	class:pcm::dielectric_profile::OneLayerErf
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  pcm::tuple<double, double> operator()(const double r) const {$/;"	f	class:pcm::dielectric_profile::OneLayerLog
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  pcm::tuple<double, double> operator()(const double r) const {$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^    void operator()(const std::ostringstream & stream) const {$/;"	f	struct:pcm::__final::Printer
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^    void operator()(const std::string & message) const { writer_(message.c_str()); }$/;"	f	struct:pcm::__final::Printer
operator ()	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  double operator()(double x) const { return spline_(fitScalar(x))(0); }$/;"	f	class:__final
operator +=	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^std::vector<char> & cnpy::operator+=(std::vector<char> & lhs, const char * rhs) {$/;"	f	class:cnpy
operator +=	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^std::vector<char> & cnpy::operator+=(std::vector<char> & lhs,$/;"	f	class:cnpy
operator +=	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^std::vector<char> & operator+=(std::vector<char> & lhs, const T rhs) {$/;"	f	namespace:cnpy
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Element & element) {$/;"	f	class:pcm::cavity::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  friend std::ostream & operator<<(std::ostream & os, ICavity & cavity) {$/;"	f	class:pcm::ICavity
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  friend std::ostream & operator<<(std::ostream & os, IGreensFunction & gf) {$/;"	f	class:pcm::IGreensFunction
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Omega & obj) {$/;"	f	class:pcm::green::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  friend std::ostream & operator<<(std::ostream & os, RadialFunction & obj) {$/;"	f	class:pcm::green::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Zeta & obj) {$/;"	f	class:pcm::green::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Anisotropic & arg) {$/;"	f	class:pcm::dielectric_profile::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  friend std::ostream & operator<<(std::ostream & os, MembraneTanh & th) {$/;"	f	class:pcm::dielectric_profile::MembraneTanh
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Metal & arg) {$/;"	f	struct:pcm::dielectric_profile::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  friend std::ostream & operator<<(std::ostream & os, OneLayerErf & th) {$/;"	f	class:pcm::dielectric_profile::OneLayerErf
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  friend std::ostream & operator<<(std::ostream & os, OneLayerLog & th) {$/;"	f	class:pcm::dielectric_profile::OneLayerLog
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  friend std::ostream & operator<<(std::ostream & os, OneLayerTanh & th) {$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Sharp & obj) {$/;"	f	struct:pcm::dielectric_profile::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Uniform & arg) {$/;"	f	struct:pcm::dielectric_profile::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Yukawa & arg) {$/;"	f	struct:pcm::dielectric_profile::__final
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  friend std::ostream & operator<<(std::ostream & os, ISolver & solver) {$/;"	f	class:pcm::ISolver
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Atom & at) {$/;"	f	struct:pcm::utils::Atom
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^std::ostream & operator<<(std::ostream & os, const Molecule & m) {$/;"	f	namespace:pcm
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.cpp	/^std::ostream & operator<<(std::ostream & os, Solvent & solvent) {$/;"	f	namespace:pcm
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  friend std::ostream & operator<<(std::ostream & os, Sphere & sph) {$/;"	f	struct:pcm::utils::Sphere
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^  friend std::ostream & operator<<(std::ostream & os, const Timer & timer) {$/;"	f	class:timer::Timer
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  friend std::ostream & operator<<(std::ostream & o, const Getkw & gkw) {$/;"	f	class:Getkw
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	/^  friend ostream & operator<<(ostream & o, const GetkwError & e) {$/;"	f	class:GetkwError
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  friend std::ostream & operator<<(std::ostream & o, const Keyword<T> & key) {$/;"	f	class:Keyword
operator <<	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  friend std::ostream & operator<<(std::ostream & o, const Section & s) {$/;"	f	class:Section
operator =	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^Molecule & Molecule::operator=(const Molecule & other) {$/;"	f	class:pcm::Molecule
operator =	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^Getkw & Getkw::operator=(const Getkw & kw) {$/;"	f	class:Getkw
operator =	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^Section & Section::operator=(const Section & s) {$/;"	f	class:Section
order	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    subroutine order(/;"	s	module:pedra_dlapack
ordpcm	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine ordpcm(/;"	s	module:pedra_cavity
origin	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  Eigen::Vector3d origin;$/;"	m	struct:pcm::GreenData
origin_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  Eigen::Vector3d origin_;$/;"	m	class:pcm::green::__final
origin_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^  Eigen::Vector3d origin_;$/;"	m	class:pcm::green::__final
origin_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<double> origin_;$/;"	m	class:pcm::Input
out	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.cpp	/^std::ostream * GetkwMessageStream::msg::out = &std::cout;$/;"	m	class:GetkwMessageStream::msg	file:
out	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	/^  static std::ostream * out;$/;"	m	struct:GetkwMessageStream::msg
outStream_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^  std::unique_ptr<std::ofstream> outStream_;$/;"	m	class:logging::FileLogPolicy
output	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_print.f90	/^    subroutine output(/;"	s	module:pedra_print
outsideDynamicGreenParams	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^GreenData Input::outsideDynamicGreenParams() const {$/;"	f	class:pcm::Input
outsideStaticGreenParams	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^GreenData Input::outsideStaticGreenParams() const {$/;"	f	class:pcm::Input
parity	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline double parity(unsigned int i) {$/;"	f	namespace:pcm::utils
parity	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^template <size_t nBits> inline int parity(std::bitset<nBits> bitrep) {$/;"	f	namespace:pcm::utils
parse_npy_header	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^void cnpy::parse_npy_header(FILE * fp,$/;"	f	class:cnpy
parse_zip_footer	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.cpp	/^void cnpy::parse_zip_footer(FILE * fp,$/;"	f	class:cnpy
pcm	/mnt/HD/software/pcmsolver-1.2.1/include/Cxx11Workarounds.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BIOperatorData.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BoundaryIntegralOperator.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Collocation.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Numerical.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/Purisima.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Cavity.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/DerivativeTypes.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/Green.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Anisotropic.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Metal.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Uniform.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Yukawa.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/Solver.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverData.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^namespace pcm {$/;"	n
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.cpp	/^namespace pcm {$/;"	n	file:
pcm	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^namespace pcm {$/;"	n
pcmsolver_compute_asc	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_compute_asc(pcmsolver_context_t * context,$/;"	f
pcmsolver_compute_polarization_energy	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^double pcmsolver_compute_polarization_energy(pcmsolver_context_t * context,$/;"	f
pcmsolver_compute_response_asc	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_compute_response_asc(pcmsolver_context_t * context,$/;"	f
pcmsolver_delete	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_delete(pcmsolver_context_t * context) {$/;"	f
pcmsolver_get_areas	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_get_areas(pcmsolver_context_t * context, double areas[]) {$/;"	f
pcmsolver_get_asc_dipole	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^double pcmsolver_get_asc_dipole(pcmsolver_context_t * context,$/;"	f
pcmsolver_get_cavity_size	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^PCMSolverIndex pcmsolver_get_cavity_size(pcmsolver_context_t * context) {$/;"	f
pcmsolver_get_center	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_get_center(pcmsolver_context_t * context, int its, double center[]) {$/;"	f
pcmsolver_get_centers	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_get_centers(pcmsolver_context_t * context, double centers[]) {$/;"	f
pcmsolver_get_irreducible_cavity_size	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^PCMSolverIndex pcmsolver_get_irreducible_cavity_size(pcmsolver_context_t * context) {$/;"	f
pcmsolver_get_surface_function	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_get_surface_function(pcmsolver_context_t * context,$/;"	f
pcmsolver_get_version	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^unsigned int pcm::pcmsolver_get_version(void) { return PCMSOLVER_VERSION; }$/;"	f	class:pcm
pcmsolver_is_compatible_library	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^bool pcmsolver_is_compatible_library(void) {$/;"	f
pcmsolver_load_surface_function	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_load_surface_function(pcmsolver_context_t * context,$/;"	f
pcmsolver_new	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^pcmsolver_context_t * pcmsolver_new(pcmsolver_reader_t input_reading,$/;"	f
pcmsolver_new_v1112	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^pcmsolver_context_t * pcmsolver_new_v1112(pcmsolver_reader_t input_reading,$/;"	f
pcmsolver_out	/mnt/HD/software/pcmsolver-1.2.1/src/bin/run_pcm.cpp	/^std::ofstream pcmsolver_out;$/;"	v
pcmsolver_print	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_print(pcmsolver_context_t * context) {$/;"	f
pcmsolver_print_surface_function	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_print_surface_function(pcmsolver_context_t * context,$/;"	f
pcmsolver_save_surface_function	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_save_surface_function(pcmsolver_context_t * context,$/;"	f
pcmsolver_save_surface_functions	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_save_surface_functions(pcmsolver_context_t * context) {$/;"	f
pcmsolver_set_surface_function	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_set_surface_function(pcmsolver_context_t * context,$/;"	f
pcmsolver_write_timings	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcmsolver_write_timings(pcmsolver_context_t * context) {$/;"	f
pcmtns	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine pcmtns(/;"	s	module:pedra_cavity
pedra_cavity	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    module pedra_cavity$/;"	m
pedra_cavity_derivatives	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity_derivatives.F90	/^    module pedra_cavity_derivatives$/;"	m
pedra_dblas	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    module pedra_dblas$/;"	m
pedra_dlapack	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dlapack.f90	/^    module pedra_dlapack$/;"	m
pedra_error_code	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    integer(kind=regint_k) :: pedra_error_code$/;"	v	module:pedra_cavity
pedra_precision	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_precision.f90	/^module pedra_precision$/;"	m
pedra_print	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_print.f90	/^module pedra_print$/;"	m
pedra_symmetry	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^    module pedra_symmetry$/;"	m
pedra_utils	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_utils.f90	/^module pedra_utils$/;"	m
pointGroup	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Symmetry pointGroup() const { return molecule_.pointGroup(); }$/;"	f	class:pcm::ICavity
pointGroup	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Symmetry pointGroup() const { return pointGroup_; }$/;"	f	class:pcm::Molecule
pointGroup	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  void pointGroup(const Symmetry & pg) { pointGroup_ = pg; }$/;"	f	class:pcm::Molecule
pointGroup_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Symmetry pointGroup_;$/;"	m	class:pcm::ICavity
pointGroup_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Symmetry pointGroup_;$/;"	m	class:pcm::Molecule
point_group	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_symmetry.f90	/^    type, public :: point_group$/;"	t	module:pedra_symmetry
policy_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  logPolicy * policy_;$/;"	m	class:logging::logger
polygen	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine polygen(/;"	s	module:pedra_cavity
polyhedra	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine polyhedra(/;"	s	module:pedra_cavity
polyhedra_driver	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine polyhedra_driver(/;"	s	module:pedra_cavity
popSection	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^void Getkw::popSection() {$/;"	f	class:Getkw
position	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  Eigen::Vector3d position;$/;"	m	struct:pcm::utils::Atom
prerep	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine prerep(/;"	s	module:pedra_cavity
print	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void print(const PCMInput & inp) {$/;"	f	namespace:pcm::detail
print	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  template <printLevel printLvl, typename... Args> void print(Args... args) {$/;"	f	class:logging::logger
print	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^void Getkw::print() const { cout << &repr(cout) << endl; }$/;"	f	class:Getkw
print	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  virtual void print() const { std::cout << &repr(std::cout, val) << std::endl; }$/;"	f	class:Keyword
print	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^void Section::print() const { cout << &repr(cout) << endl; }$/;"	f	class:Section
printCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^std::ostream & GePolCavity::printCavity(std::ostream & os) {$/;"	f	class:pcm::cavity::GePolCavity
printCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/RestartCavity.cpp	/^std::ostream & RestartCavity::printCavity(std::ostream & os) {$/;"	f	class:pcm::cavity::RestartCavity
printElement	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  std::ostream & printElement(std::ostream & os) {$/;"	f	class:pcm::cavity::__final
printImpl	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  void printImpl() {$/;"	f	class:logging::logger
printImpl	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  void printImpl(First parm1, Rest... parm) {$/;"	f	class:logging::logger
printInfo	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::printInfo() const {$/;"	f	class:pcm::Meddle
printLevel	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^enum printLevel { timings, coarse, fine, everything };$/;"	g	namespace:logging
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^std::ostream & AnisotropicLiquid<DerivativeTraits>::printObject(std::ostream & os) {$/;"	f	class:pcm::green::AnisotropicLiquid
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^std::ostream & IonicLiquid<DerivativeTraits>::printObject(std::ostream & os) {$/;"	f	class:pcm::green::IonicLiquid
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^std::ostream & SphericalDiffuse<ProfilePolicy>::printObject(std::ostream & os) {$/;"	f	class:pcm::green::SphericalDiffuse
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^std::ostream & SphericalSharp<DerivativeTraits>::printObject(std::ostream & os) {$/;"	f	class:pcm::green::SphericalSharp
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^std::ostream & UniformDielectric<DerivativeTraits>::printObject(std::ostream & os) {$/;"	f	class:pcm::green::UniformDielectric
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^std::ostream & Vacuum<DerivativeTraits>::printObject(std::ostream & os) {$/;"	f	class:pcm::green::Vacuum
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  std::ostream & printObject(std::ostream & os) {$/;"	f	class:pcm::dielectric_profile::MembraneTanh
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  std::ostream & printObject(std::ostream & os) {$/;"	f	class:pcm::dielectric_profile::OneLayerErf
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  std::ostream & printObject(std::ostream & os) {$/;"	f	class:pcm::dielectric_profile::OneLayerLog
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  std::ostream & printObject(std::ostream & os) {$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
printObject	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^  std::ostream & printObject(std::ostream & os) const {$/;"	f	class:timer::Timer
printSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.cpp	/^std::ostream & CPCMSolver::printSolver(std::ostream & os) {$/;"	f	class:pcm::solver::CPCMSolver
printSolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^std::ostream & IEFSolver::printSolver(std::ostream & os) {$/;"	f	class:pcm::solver::IEFSolver
printSurfaceFunction	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::printSurfaceFunction(const std::string & name) const {$/;"	f	class:pcm::Meddle
print_eigen_matrix	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void print_eigen_matrix(const Eigen::MatrixBase<Derived> & matrix,$/;"	f	namespace:pcm::utils
probeRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/CavityData.hpp	/^  double probeRadius;$/;"	m	struct:pcm::CavityData
probeRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.hpp	/^  double probeRadius;$/;"	m	class:pcm::cavity::__final
probeRadius	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^  double probeRadius;$/;"	m	struct:pcm::utils::Solvent
probeRadius_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double probeRadius_;$/;"	m	class:pcm::Input
profile_	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreensFunction.hpp	/^  ProfilePolicy profile_;$/;"	m	class:pcm::green::GreensFunction
providedBy	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string providedBy() const { return providedBy_; }$/;"	f	class:pcm::Input
providedBy_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string providedBy_;$/;"	m	class:pcm::Input
pushSection	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^void Getkw::pushSection(const string & path) {$/;"	f	class:Getkw
push_back	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  void push_back(const StateVariable & x, double y) {$/;"	f	class:pcm::green::__final
r_0_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double r_0_;$/;"	m	struct:pcm::green::detail::IntegratorParameters
r_infinity_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double r_infinity_;$/;"	m	struct:pcm::green::detail::IntegratorParameters
radii	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double radii(size_t i) const { return radii_[i]; }$/;"	f	class:pcm::Input
radii	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<double> radii() const { return radii_; }$/;"	f	class:pcm::Input
radiiSet	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string radiiSet() const { return radiiSet_; }$/;"	f	class:pcm::Input
radiiSetName	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string radiiSetName() const { return radiiSetName_; }$/;"	f	class:pcm::Input
radiiSetName_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string radiiSetName_;$/;"	m	class:pcm::Input
radiiSet_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string radiiSet_;$/;"	m	class:pcm::Input
radii_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<double> radii_;$/;"	m	class:pcm::Input
radius	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/Sharp.hpp	/^  double radius;$/;"	m	struct:pcm::dielectric_profile::__final
radius	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  double radius;$/;"	m	struct:pcm::utils::Atom
radius	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  double radius;$/;"	m	struct:pcm::utils::Sphere
radiusScaling	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  double radiusScaling;$/;"	m	struct:pcm::utils::Atom
readKey	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^bool Getkw::readKey(Section * sect, istream & fis) {$/;"	f	class:Getkw
readSect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^Section * Getkw::readSect(istream & fis) {$/;"	f	class:Getkw
readSect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^Section * Section::readSect(ifstream & \/* fis *\/) { return 0; }$/;"	f	class:Section
reader	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^void Input::reader(const PCMInput & host_input) {$/;"	f	class:pcm::Input
reader	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^void Input::reader(const std::string & filename) {$/;"	f	class:pcm::Input
readline	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^void Getkw::readline(istream & fis, istringstream & isi) {$/;"	f	class:Getkw
regint_k	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^integer, parameter :: regint_k /;"	v	module:metal_sphere
regint_k	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_precision.f90	/^integer, parameter :: regint_k /;"	v	module:pedra_precision
registerElapsed	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^  void registerElapsed(const std::string & chkpt_name, timing t_stop) {$/;"	f	class:timer::Timer
registerObject	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  bool registerObject(const std::string & objID, const CreateObject & functor) {$/;"	f	class:pcm::detail::BaseFactory
relativeWidth	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double relativeWidth() const {$/;"	f	class:pcm::dielectric_profile::OneLayerErf
relativeWidth	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double relativeWidth() const {$/;"	f	class:pcm::dielectric_profile::OneLayerLog
relativeWidth	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double relativeWidth() const {$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
remove_extension	/mnt/HD/software/pcmsolver-1.2.1/src/bin/run_pcm.cpp	/^std::string remove_extension(const std::string & filename) {$/;"	f
repcav	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine repcav(/;"	s	module:pedra_cavity
repr	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^ostream & Getkw::repr(ostream & o) const {$/;"	f	class:Getkw
repr	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  std::ostream & repr(std::ostream & o, const std::vector<X> & v) const {$/;"	f	class:Keyword
repr	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  template <typename X> std::ostream & repr(std::ostream & o, X \/* v *\/) const {$/;"	f	class:Keyword
repr	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^ostream & Section::repr(ostream & o) const {$/;"	f	class:Section
retrieve	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  CallbackConstIter retrieve(const std::string & objID) const {$/;"	f	class:pcm::detail::BaseFactory
right_trim	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string right_trim(const char * src) {$/;"	f	namespace:pcm::detail
right_trim	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string right_trim(std::string s) {$/;"	f	namespace:pcm::detail
rk4	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.cpp	/^double rk4(double t0, double u0, double dt, double f(double t, double u)) {$/;"	f	namespace:pcm::utils
rk4vec	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.cpp	/^double * rk4vec(double t0,$/;"	f	namespace:pcm::utils
rotate	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^void Molecule::rotate(const Eigen::Matrix3d & rotationMatrix) {$/;"	f	class:pcm::Molecule
rotorType	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^enum rotorType { rtAsymmetric, rtSymmetric, rtSpherical, rtLinear, rtAtom };$/;"	g	namespace:pcm
rotorTypeList	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^const std::string rotorTypeList[] = {"Asymmetric",$/;"	m	namespace:pcm
rotor_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  rotorType rotor_;$/;"	m	class:pcm::Molecule
rtAsymmetric	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^enum rotorType { rtAsymmetric, rtSymmetric, rtSpherical, rtLinear, rtAtom };$/;"	e	enum:pcm::rotorType
rtAtom	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^enum rotorType { rtAsymmetric, rtSymmetric, rtSpherical, rtLinear, rtAtom };$/;"	e	enum:pcm::rotorType
rtLinear	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^enum rotorType { rtAsymmetric, rtSymmetric, rtSpherical, rtLinear, rtAtom };$/;"	e	enum:pcm::rotorType
rtSpherical	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^enum rotorType { rtAsymmetric, rtSymmetric, rtSpherical, rtLinear, rtAtom };$/;"	e	enum:pcm::rotorType
rtSymmetric	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^enum rotorType { rtAsymmetric, rtSymmetric, rtSpherical, rtLinear, rtAtom };$/;"	e	enum:pcm::rotorType
saveCavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.cpp	/^void ICavity::saveCavity(const std::string & fname) {$/;"	f	class:pcm::ICavity
saveSurfaceFunction	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::saveSurfaceFunction(const std::string & name) const {$/;"	f	class:pcm::Meddle
saveSurfaceFunctions	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::saveSurfaceFunctions() const {$/;"	f	class:pcm::Meddle
scale	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  void scale(double scaling) {$/;"	f	struct:pcm::utils::Sphere
scaling	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/BIOperatorData.hpp	/^  double scaling;$/;"	m	struct:pcm::BIOperatorData
scaling	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool scaling() const { return scaling_; }$/;"	f	class:pcm::Input
scaling_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  bool scaling_;$/;"	m	class:pcm::Input
sdebug	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	69;"	d
sects	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  std::map<std::string, Section *> sects;$/;"	m	class:Section
semanticCheck	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^void Input::semanticCheck() {}$/;"	f	class:pcm::Input
set	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  void set(T & t) { val = t; }$/;"	f	class:Keyword
setDebugLevel	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	/^  static void setDebugLevel(int i) { DebugLevel = i; }$/;"	f	struct:GetkwMessageStream::msg
setDefined	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  void setDefined(bool _isDefd) { isDefd = _isDefd; }$/;"	f	class:Keyword
setDefined	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  void setDefined(bool isDefd) { this->isDefd = isDefd; }$/;"	f	class:Section
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(bool \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(const std::string & \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(const std::vector<bool> & \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(const std::vector<double> & \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(const std::vector<int> & \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(const std::vector<std::string> & \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(double \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  bool setKind(int \/* t *\/) {$/;"	f	class:Keyword
setKind	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  template <class X> bool setKind(const X & t) {$/;"	f	class:Keyword
setName	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  void setName(const std::string & _name) { name = _name; }$/;"	f	class:Keyword
setName	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  void setName(std::string name) { this->name = name; }$/;"	f	class:Section
setNkeys	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  void setNkeys(int nkeys) { this->nkeys = nkeys; }$/;"	f	class:Section
setNsect	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  void setNsect(int nsect) { this->nsect = nsect; }$/;"	f	class:Section
setOutputStream	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/messages.h	/^  static void setOutputStream(std::ostream & o) { out = &o; }$/;"	f	struct:GetkwMessageStream::msg
setStrict	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^void Getkw::setStrict(bool flag) { strict = flag; }$/;"	f	class:Getkw
setStrict	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^void GetkwError::setStrict(bool flag) { strict = flag; }$/;"	f	class:GetkwError
setSurfaceFunction	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::setSurfaceFunction(PCMSolverIndex size,$/;"	f	class:pcm::Meddle
setTag	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  void setTag(const std::string tag) { this->tag = tag; }$/;"	f	class:Section
setVerbose	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^void Getkw::setVerbose(bool flag) { verbose = flag; }$/;"	f	class:Getkw
setVerbose	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^void GetkwError::setVerbose(bool flag) { verbose = flag; }$/;"	f	class:GetkwError
sevenPointStencil	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Stencils.hpp	/^inline double sevenPointStencil(const DifferentiableFunction & func,$/;"	f
shape	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^  std::vector<unsigned int> shape;$/;"	m	struct:cnpy::NpyArray
sign	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^template <typename T> inline int sign(T val) { return (T(0) < val) - (val < T(0)); }$/;"	f	namespace:pcm::utils
singleLayer	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  double singleLayer(const Element & e, double factor) const {$/;"	f	class:pcm::IGreensFunction
singleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/AnisotropicLiquid.cpp	/^double AnisotropicLiquid<DerivativeTraits>::singleLayer_impl($/;"	f	class:pcm::green::AnisotropicLiquid
singleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/IonicLiquid.cpp	/^double IonicLiquid<DerivativeTraits>::singleLayer_impl(const Element & \/* e *\/,$/;"	f	class:pcm::green::IonicLiquid
singleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^double SphericalDiffuse<ProfilePolicy>::singleLayer_impl(const Element & e,$/;"	f	class:pcm::green::SphericalDiffuse
singleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalSharp.cpp	/^double SphericalSharp<DerivativeTraits>::singleLayer_impl(const Element & e,$/;"	f	class:pcm::green::SphericalSharp
singleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/UniformDielectric.cpp	/^double UniformDielectric<DerivativeTraits>::singleLayer_impl(const Element & e,$/;"	f	class:pcm::green::UniformDielectric
singleLayer_impl	/mnt/HD/software/pcmsolver-1.2.1/src/green/Vacuum.cpp	/^double Vacuum<DerivativeTraits>::singleLayer_impl(const Element & e,$/;"	f	class:pcm::green::Vacuum
size	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  PCMSolverIndex size() const { return nElements_; }$/;"	f	class:pcm::ICavity
size	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  PCMSolverIndex size() { return nElements_; }$/;"	f	class:pcm::ICavity
solution_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  IndependentSolution<StateVariable, ODESystem> solution_;$/;"	m	class:pcm::green::__final
solvent	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  Solvent solvent() const { return solvent_; }$/;"	f	class:pcm::Input
solvent_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  Solvent solvent_;$/;"	m	class:pcm::Input
solvents	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.cpp	/^SolventMap & solvents() {$/;"	f	namespace:pcm
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.cpp	/^namespace solver {$/;"	n	namespace:pcm	file:
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/CPCMSolver.hpp	/^namespace solver {$/;"	n	namespace:pcm
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.cpp	/^namespace solver {$/;"	n	namespace:pcm	file:
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/IEFSolver.hpp	/^namespace solver {$/;"	n	namespace:pcm
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/Solver.hpp	/^namespace solver {$/;"	n	namespace:pcm
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.cpp	/^namespace solver {$/;"	n	namespace:pcm	file:
solver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverImpl.hpp	/^namespace solver {$/;"	n	namespace:pcm
solverParams	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^SolverData Input::solverParams() const {$/;"	f	class:pcm::Input
solverType	/mnt/HD/software/pcmsolver-1.2.1/src/solver/SolverData.hpp	/^  std::string solverType;$/;"	m	struct:pcm::SolverData
solverType_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string solverType_;$/;"	m	class:pcm::Input
sp	/mnt/HD/software/pcmsolver-1.2.1/src/metal/metal_sphere.F90	/^integer, parameter :: sp /;"	v	module:metal_sphere
sp	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_precision.f90	/^integer, parameter :: sp /;"	v	module:pedra_precision
sphere	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Sphere sphere() const { return sphere_; }$/;"	f	class:pcm::cavity::__final
sphereCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd & sphereCenter() { return sphereCenter_; }$/;"	f	class:pcm::ICavity
sphereCenter	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::Matrix3Xd & sphereCenter() const { return sphereCenter_; }$/;"	f	class:pcm::ICavity
sphereCenter_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::Matrix3Xd sphereCenter_;$/;"	m	class:pcm::ICavity
sphereRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::VectorXd & sphereRadius() { return sphereRadius_; }$/;"	f	class:pcm::ICavity
sphereRadius	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const Eigen::VectorXd & sphereRadius() const { return sphereRadius_; }$/;"	f	class:pcm::ICavity
sphereRadius_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  Eigen::VectorXd sphereRadius_;$/;"	m	class:pcm::ICavity
sphere_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Sphere sphere_;$/;"	m	class:pcm::cavity::__final
spheres	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  const std::vector<Sphere> & spheres() const { return spheres_; }$/;"	f	class:pcm::ICavity
spheres	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  std::vector<Sphere> & spheres() { return spheres_; }$/;"	f	class:pcm::ICavity
spheres	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  Sphere spheres(int i) const { return spheres_[i]; }$/;"	f	class:pcm::Input
spheres	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<Sphere> spheres() const { return spheres_; }$/;"	f	class:pcm::Input
spheres	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  Sphere spheres(int i) const { return spheres_[i]; }$/;"	f	class:pcm::Molecule
spheres	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  std::vector<Sphere> spheres() const { return spheres_; }$/;"	f	class:pcm::Molecule
spheres_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  std::vector<Sphere> spheres_;$/;"	m	class:pcm::ICavity
spheres_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::vector<Sphere> spheres_;$/;"	m	class:pcm::Input
spheres_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  std::vector<Sphere> spheres_;$/;"	m	class:pcm::Molecule
spherical_polygon	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.cpp	/^void Element::spherical_polygon(Eigen::Vector3d & t_,$/;"	f	class:pcm::cavity::Element
sphper	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine sphper(/;"	s	module:pedra_cavity
splineInterpolation	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline double splineInterpolation(const double point,$/;"	f	namespace:pcm::utils
spline_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  CubicSpline spline_;$/;"	m	class:__final
splitPath	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^void Section::splitPath(const string & pathspec, vector<string> & path) const {$/;"	f	class:Section
splitTag	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^int Section::splitTag(const string & path, string & tag) const {$/;"	f	class:Section
sstack	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  std::stack<const Section *> sstack;$/;"	m	class:Getkw
strict	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  bool strict;$/;"	m	class:Getkw
strict	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^bool GetkwError::strict = false;$/;"	m	class:GetkwError	file:
strict	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	/^  static bool strict;$/;"	m	class:GetkwError
strings	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_utils.f90	/^module strings$/;"	m
subscribe	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  void subscribe(const std::string & objID, const CreateObject & functor) {$/;"	f	class:pcm::detail::BaseFactory
symbol	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^  std::string symbol;$/;"	m	struct:pcm::utils::Atom
symmetryBlocking	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void symmetryBlocking(Eigen::MatrixXd & matrix,$/;"	f	namespace:pcm::utils
symmetryPacking	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^inline void symmetryPacking(std::vector<Eigen::MatrixXd> & blockedMatrix,$/;"	f	namespace:pcm::utils
tag	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  std::string tag;$/;"	m	class:Section
tags	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.h	/^  std::map<std::string, Section *> tags;$/;"	m	class:Section
tangent_and_bitangent	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.cpp	/^void tangent_and_bitangent(const Eigen::Vector3d & n_,$/;"	f	namespace:pcm::cavity::detail
tessera	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    subroutine tessera(/;"	s	module:pedra_cavity
threePointStencil	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Stencils.hpp	/^inline double threePointStencil(const DifferentiableFunction & func,$/;"	f
timer	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^namespace timer {$/;"	n
timerDONE	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline void timerDONE(const std::string & fname) {$/;"	f	namespace:timer
timerOFF	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline void timerOFF(const std::string & chkpt_name) {$/;"	f	namespace:timer
timerON	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^inline void timerON(const std::string & chkpt_name) {$/;"	f	namespace:timer
timing	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^typedef pcm::tuple<double, double> timing;$/;"	t	namespace:timer
timings	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^enum printLevel { timings, coarse, fine, everything };$/;"	e	enum:logging::printLevel
timings_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Timer.hpp	/^  TimingsMap timings_;$/;"	m	class:timer::Timer
toFile	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.cpp	/^void SphericalDiffuse<ProfilePolicy>::toFile(const std::string & prefix) {$/;"	f	class:pcm::green::SphericalDiffuse
toplevel	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  Section * toplevel;$/;"	m	class:Getkw
tostring	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^std::string tostring(T i, int \/* pad *\/ = 0, char \/* padval *\/ = ' ') {$/;"	f	namespace:cnpy
transfer_spheres	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.cpp	/^void transfer_spheres(const std::vector<Sphere> & spheres,$/;"	f	namespace:pcm
translate	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.cpp	/^void Molecule::translate(const Eigen::Vector3d & translationVector) {$/;"	f	class:pcm::Molecule
traversePath	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^const Section * Section::traversePath(vector<string> & path,$/;"	f	class:Section
trigger	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^void GetkwError::trigger(const string & err) {$/;"	f	class:GetkwError
trim	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string trim(const char * src) {$/;"	f	namespace:pcm::detail
trim	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string trim(std::string s) {$/;"	f	namespace:pcm::detail
trim_and_upper	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string trim_and_upper(const char * src) {$/;"	f	namespace:pcm::detail
typlab	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_cavity.F90	/^    character(16) function typlab(/;"	f	module:pedra_cavity
unRegisterObject	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  bool unRegisterObject(const std::string & objID) {$/;"	f	class:pcm::detail::BaseFactory
units	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string units() const { return units_; }$/;"	f	class:pcm::Input
units_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  std::string units_;$/;"	m	class:pcm::Input
unsubscribe	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Factory.hpp	/^  void unsubscribe(const std::string & objID) {$/;"	f	class:pcm::detail::BaseFactory
upperLimit	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double upperLimit() const { return domain_.second; }$/;"	f	class:pcm::dielectric_profile::MembraneTanh
upperLimit	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double upperLimit() const { return domain_.second; }$/;"	f	class:pcm::dielectric_profile::OneLayerErf
upperLimit	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double upperLimit() const { return domain_.second; }$/;"	f	class:pcm::dielectric_profile::OneLayerLog
upperLimit	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double upperLimit() const { return domain_.second; }$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
uppercase	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string uppercase(const char * src) {$/;"	f	namespace:pcm::detail
uppercase	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.cpp	/^std::string uppercase(std::string s) {$/;"	f	namespace:pcm::detail
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.cpp	/^namespace utils {$/;"	n	namespace:pcm	file:
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Atom.hpp	/^namespace utils {$/;"	n	namespace:pcm
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.cpp	/^namespace utils {$/;"	n	namespace:pcm	file:
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/ChargeDistribution.hpp	/^namespace utils {$/;"	n	namespace:pcm
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/MathUtils.hpp	/^namespace utils {$/;"	n	namespace:pcm
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.cpp	/^namespace utils {$/;"	n	namespace:pcm	file:
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^namespace utils {$/;"	n	namespace:pcm
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.cpp	/^namespace utils {$/;"	n	namespace:pcm	file:
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/RungeKutta4.hpp	/^namespace utils {$/;"	n	namespace:pcm
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Solvent.hpp	/^namespace utils {$/;"	n	namespace:pcm
utils	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^namespace utils {$/;"	n	namespace:pcm
val	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  T val;$/;"	m	class:Keyword
value	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double value(double point) const {$/;"	f	class:pcm::dielectric_profile::MembraneTanh
value	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double value(double point) const {$/;"	f	class:pcm::dielectric_profile::OneLayerErf
value	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double value(double point) const {$/;"	f	class:pcm::dielectric_profile::OneLayerLog
value	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double value(double point) const {$/;"	f	class:pcm::dielectric_profile::OneLayerTanh
vector_product	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_dblas.f90	/^    subroutine vector_product(/;"	s	module:pedra_dblas
verbose	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.h	/^  bool verbose;$/;"	m	class:Getkw
verbose	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^bool GetkwError::verbose = true;$/;"	m	class:GetkwError	file:
verbose	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.h	/^  static bool verbose;$/;"	m	class:GetkwError
vertices	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Matrix3Xd vertices() const { return vertices_; }$/;"	f	class:pcm::cavity::__final
vertices_	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  Eigen::Matrix3Xd vertices_;$/;"	m	class:pcm::cavity::__final
weight	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  double weight(int i) const { return weight_[i]; }$/;"	f	class:pcm::utils::GaussLegendreRule
weight_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/QuadratureRules.hpp	/^  std::vector<double> weight_;$/;"	m	class:pcm::utils::GaussLegendreRule
width	/mnt/HD/software/pcmsolver-1.2.1/src/green/GreenData.hpp	/^  double width;$/;"	m	struct:pcm::GreenData
width12_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double width12_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
width23_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/MembraneTanh.hpp	/^  double width23_;$/;"	m	class:pcm::dielectric_profile::MembraneTanh
width_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerErf.hpp	/^  double width_;$/;"	m	class:pcm::dielectric_profile::OneLayerErf
width_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerLog.hpp	/^  double width_;$/;"	m	class:pcm::dielectric_profile::OneLayerLog
width_	/mnt/HD/software/pcmsolver-1.2.1/src/green/dielectric_profile/OneLayerTanh.hpp	/^  double width_;$/;"	m	class:pcm::dielectric_profile::OneLayerTanh
width_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Input.hpp	/^  double width_;$/;"	m	class:pcm::Input
wlkdin	/mnt/HD/software/pcmsolver-1.2.1/src/pedra/pedra_utils.f90	/^  subroutine wlkdin(/;"	s	module:pedra_utils
word_size	/mnt/HD/software/pcmsolver-1.2.1/src/utils/cnpy.hpp	/^  unsigned int word_size;$/;"	m	struct:cnpy::NpyArray
write	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^  virtual void write(const std::string & msg) { (*outStream_) << msg << std::endl; }$/;"	f	class:logging::FileLogPolicy
writeMutex_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  std::mutex writeMutex_;$/;"	m	class:logging::logger
writeOFF	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/GePolCavity.cpp	/^void GePolCavity::writeOFF(const std::string & suffix) {$/;"	f	class:pcm::cavity::GePolCavity
writeTimings	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^void pcm::Meddle::writeTimings() const { TIMER_DONE("pcmsolver.timer.dat"); }$/;"	f	class:pcm::Meddle
writeToFile	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^void writeToFile(RadialFunction<StateVariable, ODESystem, IndependentSolution> & f,$/;"	f	namespace:pcm::green
writer_	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.hpp	/^    HostWriter writer_;$/;"	m	struct:pcm::__final::Printer
xMax_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  double xMax_;$/;"	m	class:__final
xMin_	/mnt/HD/software/pcmsolver-1.2.1/src/utils/SplineFunction.hpp	/^  double xMin_;$/;"	m	class:__final
y_0_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double y_0_;$/;"	m	class:pcm::green::__final
y_infinity_	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  double y_infinity_;$/;"	m	class:pcm::green::__final
zetaC_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^  RadialFunction<detail::StateType, detail::LnTransformedRadial, Zeta> zetaC_;$/;"	m	class:pcm::green::__final
zeta_	/mnt/HD/software/pcmsolver-1.2.1/src/green/SphericalDiffuse.hpp	/^      zeta_;$/;"	m	class:pcm::green::__final
~Element	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/Element.hpp	/^  ~Element() {}$/;"	f	class:pcm::cavity::__final
~FileLogPolicy	/mnt/HD/software/pcmsolver-1.2.1/src/utils/LoggerImpl.hpp	/^  virtual ~FileLogPolicy() {$/;"	f	class:logging::FileLogPolicy
~Getkw	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Getkw.cpp	/^Getkw::~Getkw() { delete toplevel; }$/;"	f	class:Getkw
~GetkwError	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/GetkwError.cpp	/^GetkwError::~GetkwError() throw() {$/;"	f	class:GetkwError
~IBoundaryIntegralOperator	/mnt/HD/software/pcmsolver-1.2.1/src/bi_operators/IBoundaryIntegralOperator.hpp	/^  virtual ~IBoundaryIntegralOperator() {}$/;"	f	class:pcm::IBoundaryIntegralOperator
~ICavity	/mnt/HD/software/pcmsolver-1.2.1/src/cavity/ICavity.hpp	/^  virtual ~ICavity() {}$/;"	f	class:pcm::ICavity
~IGreensFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/IGreensFunction.hpp	/^  virtual ~IGreensFunction() {}$/;"	f	class:pcm::IGreensFunction
~ISolver	/mnt/HD/software/pcmsolver-1.2.1/src/solver/ISolver.hpp	/^  virtual ~ISolver() {}$/;"	f	class:pcm::ISolver
~Keyword	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Keyword.h	/^  virtual ~Keyword() {}$/;"	f	class:Keyword
~Meddle	/mnt/HD/software/pcmsolver-1.2.1/src/interface/Meddle.cpp	/^pcm::Meddle::~Meddle() {$/;"	f	class:pcm::Meddle
~Molecule	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Molecule.hpp	/^  ~Molecule() {}$/;"	f	class:pcm::Molecule
~Omega	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  ~Omega() {}$/;"	f	class:pcm::green::__final
~RadialFunction	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  ~RadialFunction() {}$/;"	f	class:pcm::green::__final
~Section	/mnt/HD/software/pcmsolver-1.2.1/src/utils/getkw/Section.cpp	/^Section::~Section() {$/;"	f	class:Section
~Sphere	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Sphere.hpp	/^  ~Sphere() {}$/;"	f	struct:pcm::utils::Sphere
~Symmetry	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Symmetry.hpp	/^  ~Symmetry() {}$/;"	f	class:Symmetry
~Zeta	/mnt/HD/software/pcmsolver-1.2.1/src/green/InterfacesImpl.hpp	/^  ~Zeta() {}$/;"	f	class:pcm::green::__final
~logger	/mnt/HD/software/pcmsolver-1.2.1/src/utils/Logger.hpp	/^  ~logger() {$/;"	f	class:logging::logger
